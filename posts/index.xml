<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on teukka.tech</title><link>https://teukka.tech/posts/</link><description>Recent content in Posts on teukka.tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>taylor@teukka.tech (taylor thompson)</managingEditor><webMaster>taylor@teukka.tech (taylor thompson)</webMaster><lastBuildDate>Fri, 19 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>What's next for Tendril Wiki</title><link>https://teukka.tech/posts/tendril-wiki-future/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/tendril-wiki-future/</guid><description>In my last post, I discussed some of the lessons I learned from building my personal knowledge management tool, Tendril Wiki. I want to discuss my vision for the tool and ideas around knowledge management. The main goal of Tendril Wiki is to collapse the tools I use for managing information into a single, unified platform. The functionality in Tendril Wiki arises from my own personal needs or from features I&amp;rsquo;ve seen other platforms / tools implement and wanted for myself.</description></item><item><title>Lessons from Building Tendril Wiki</title><link>https://teukka.tech/posts/tendril-wiki-lessons/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/tendril-wiki-lessons/</guid><description>Over the past year and half, I&amp;rsquo;ve been working on a knowledge management tool called, Tendril Wiki. I&amp;rsquo;ve used it to organize my thoughts and catalogue information both at work and in my personal life. Tendril Wiki has served as a place for me to experiment with tooling ideas, gain more experience using the Rust programming language, and copy concepts from other tools for thought. After 18 months, I want to reflect on what I&amp;rsquo;ve learned and where I can improve.</description></item><item><title>Ideas That Have Changed My Life</title><link>https://teukka.tech/posts/lifechanging-ideas/</link><pubDate>Tue, 25 Jan 2022 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/lifechanging-ideas/</guid><description>About this list This is a running and incomplete list of ideas that have changed the way I thought or interacted with the world. The plan is to continuously add ideas and maybe even spin some of them off into their own blog posts.
SYSTEMICS
The ideas that most of the things we interact with each day is part of a system. Ecosystems, cities, digital applications, companies, societies are all systems and there for express systemic behaviors.</description></item><item><title>Neovim Tip, Smarter Path</title><link>https://teukka.tech/posts/vimtip-path/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/vimtip-path/</guid><description>Intro Fuzzy finders can be a good tool for navigating files in a codebase, but they don&amp;rsquo;t give you the same functionality as a properly set path option in vim. Key mappings like gf, [i, [d, and commands like :find depend on having your path set correctly to find the file you&amp;rsquo;re searching for. Using the :find command also gives us the ability to tab complete a file name, a feature which fuzzy finders do not offer.</description></item><item><title>(Nvim) Lua for Javascripters: Module Exports</title><link>https://teukka.tech/posts/js-to-lua-modules/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/js-to-lua-modules/</guid><description>Goals This aims to be quick reference guide on lua module exports compared to JavaScript module exports.
Task We want to export a series of module scoped functions in both JavaScript and Lua. This guide also show side by side comparisons on writing a file to a specific directory and deleting a file from the same directory.
In this quick tip, we will use CommonJS as the format for the JavaScript modules since it more closely resembles Lua modules in its construction.</description></item><item><title>(Nvim) Lua for Javascripters: Spawning Processes</title><link>https://teukka.tech/posts/js-to-lua/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/js-to-lua/</guid><description>Goals This should be a quick reference guide for those familiar with NodeJS on how to execute the same async tasks in Lua using luv. This is aimed towards use cases inside Neovim, but is not limited to those cases.
Task We want to spawn a child task to convert a markdown document into HTML using pandoc. This could be used as part of a publishing flow for a blog, for writing notes, or for implementing a markdown previewer.</description></item><item><title>Looking back at ViiksetJS</title><link>https://teukka.tech/posts/viiksetretro/</link><pubDate>Thu, 23 Jul 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/viiksetretro/</guid><description>See the demo site and write up here</description></item><item><title>Peer Discovery over UDP</title><link>https://teukka.tech/posts/2020-07-12-peerdiscover/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-07-12-peerdiscover/</guid><description>What is Peer discovery Peer discovery allows you to discover other computers on the same subnet, intranet, or through the internet. Discovering peers directly removes the necessity of a centralized server architecture, reducing the number of network jumps your packets require to share information with each other. Peer discovery can be used in: discovering microservices in the same docker network or kubernetes cluster, file sharing (like airdrop and bittorrent), and peer to peer gaming.</description></item><item><title>Javascript Quick Tip -- Browser Notifications</title><link>https://teukka.tech/posts/2020-05-16-notifications/</link><pubDate>Sat, 16 May 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-05-16-notifications/</guid><description>Let &amp;lsquo;Em Know While notifications are one of the browser features that are often abused and lead to obnoxious spam, there are still use cases where notifications enhance the experience of your web application. Modern browsers (with the exception of iOS Safari), support two types of notifications: push, and web. This post discusses only web notifications, since they do not require registration on a server, or the use of a service worker (although they can be used with both).</description></item><item><title>Build a Better Web with Service Workers</title><link>https://teukka.tech/posts/2020-03-07-serviceworker/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-03-07-serviceworker/</guid><description>Working Hard, or Hardly Working? The Service Worker API is a powerful tool for providing better offline experiences, push notifications, and background syncing for web applications. Like me, you may be familiar with service workers from the role they play in creating Progressive Web Apps (PWAs), or from seeing them registered as part of the build output of create-react-app. While this automatic output from build tools such as create-react-app is very useful in getting started with PWAs, using the Service Worker API is much more beneficial to your application when tailored to your use cases.</description></item><item><title>A Brief Look at Javascript Proxies</title><link>https://teukka.tech/posts/2020-02-01-proxies/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-02-01-proxies/</guid><description>Proxies Javascript Proxies are a powerful concept in ES6. They give developers more control over JS objects, paving the way for declarative API design. I am going to show some examples of how use proxies to extend the functionality of traditional Javascript objects and why they are useful in understanding the flow of data inside your programs.
Microservice Client The first example comes from a request management client that uses a JSON schema to validate incoming requests and route them to other services.</description></item><item><title>Neovim Tip, GitLens</title><link>https://teukka.tech/posts/2020-01-28-vimtip-gitlens/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-01-28-vimtip-gitlens/</guid><description>Intro GitLens is a VSCode plugin that, among other things, allows you to see the time, commit author, and commit message of the current line. With a little help from to the neovim api and our shell, it we can recreate this functionality in a few lines of lua code.
The Code -- in utils.lua local M = {} local api = vim.api function M.blameVirtText() local ft = vim.fn.expand(&amp;#39;%:h:t&amp;#39;) -- get the current file extension if ft == &amp;#39;&amp;#39; then -- if we are in a scratch buffer or unknown filetype return end if ft == &amp;#39;bin&amp;#39; then -- if we are in nvim&amp;#39;s terminal window return end api.</description></item><item><title>Using LibUV in Neovim</title><link>https://teukka.tech/posts/2020-01-07-vimloop/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-01-07-vimloop/</guid><description>Off The Main Loop: Async Actions within Neovim Neovim embeds the libuv library in the editor and exposes lua (and to some extent vimscript through the jobstart function) bindings for interacting with the library&amp;rsquo;s API. This allows actions in the editor to happen asynchronously, keeping the main editor loop clear for user input. What this means practically for users is that actions which take a long time such as grepping through large projects, generating ctags, or linting can now be done in the background without blocking the user&amp;rsquo;s ability to keep editing text.</description></item><item><title>From init.vim to init.lua</title><link>https://teukka.tech/posts/2019-12-19-luanvim/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2019-12-19-luanvim/</guid><description>Why Lua? Neovim has an embedded lua 5.1 runtime which is used to create faster and more powerful extensions of your favorite editor. In the Neovim charter, it lists one of its goals as developing a first-class lua scripting alternative to VimL. One of the reasons for doing this is that VimL is a slow interpreted language with almost no optimizations. Much of the time spent in vim startup and in actions from plugins that can block the main loop in the editor is in parsing and executing vimscript.</description></item><item><title>Build Your Own Frontend Framework Part 2, Data Fetching</title><link>https://teukka.tech/posts/2019-10-01-byoff-part-2/</link><pubDate>Thu, 10 Oct 2019 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2019-10-01-byoff-part-2/</guid><description>Part Two, Data Fetching on Mount Asynchronous actions are essential in any modern web application. The ability to fetch data from some service and display it to users is an important part of building a framework to support these applications. In order for our components to do this, we need to refactor. Our component calls mount when we want to render it on the page, but this function only serves to attach styles and event handlers to the component, not fetch data asynchronously.</description></item><item><title>Build Your Own Frontend Framework Part 1</title><link>https://teukka.tech/posts/2019-09-15-byoff-part-1/</link><pubDate>Sun, 15 Sep 2019 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2019-09-15-byoff-part-1/</guid><description>Part One, Basic Component Components will be the basic building blocks of our frontend framework. Components will allow modular composition and encapsulation. The first component implementation will be rather naive, but that&amp;rsquo;s alright since its implementation will evolve over time. Let&amp;rsquo;s start with creating a Component class:
const COOL_COMPONENT = Symbol(&amp;#34;component&amp;#34;); class Component { constructor(element, args = {}) { this.$$typeof = COOL_COMPONENT; this.el = document.createElement(element); this.args = args; } } Breaking this down:</description></item><item><title>Build Your Own Frontend Framework, Introduction</title><link>https://teukka.tech/posts/2019-09-09-build-your-own-frontend-framework/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2019-09-09-build-your-own-frontend-framework/</guid><description>Welcome to build your own frontend framework project! I will be coding this live on my twitch stream. Blog posts will come after the streams.
Goals Become more familiar with some of the concepts that power modern frontend frameworks. Gain a deeper understanding of some of the challenges that arise in creating a JavaScript framework. Get better at writing JavaScript. See how different frameworks solve common problems. Non Goals Build a production ready, competitive framework.</description></item><item><title>Vim does that already</title><link>https://teukka.tech/posts/2019-08-25-vimcandothat/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2019-08-25-vimcandothat/</guid><description>Power to Productivity Vim is a powerful tool which helps you stay productive and spend less time doing the mechanical work of coding. For many, Vim seems archaic, under-featured, or even intimidating. I hope to illustrate that Vim none of those things, but is in fact a great editor for nearly every development environment.
I want to focus on three common tasks where Vim helps you be more productive without leaving your editor.</description></item></channel></rss>