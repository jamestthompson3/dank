[{"contents":"\u003cp\u003eTwitter (or decentralized alternatives) is a great interstitial journaling tool\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/79413/","section":"updates","tags":[],"title":""},{"contents":"\u003cp\u003eUsing the idea of Leary\u0026rsquo;s \u0026ldquo;Quantum Universe\u0026rdquo;, where all matter can be reduced to a digital 1/0 representation, I wonder what the compression ratio for memories in our brains is, and what (lossy) algorithm is used to achieve it.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/75816/","section":"updates","tags":["computation"],"title":""},{"contents":"\u003cp\u003eAll software essentially deals in simulation. Even that which supposedly interacts with “real” things, like an inventory system, is actually a simulation of the inventory system designed to be more easily manipulated by the software operator.\u003c/p\u003e\n\u003cp\u003eTherefore all software engineers are simluationists, or creators of an alternate reality whose ties and influences to the physical reality which they inhabit vary in strength.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/35615/","section":"updates","tags":[],"title":""},{"contents":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003eFuzzy finders can be a good tool for navigating files in a codebase, but they don\u0026rsquo;t give you the\nsame functionality as a properly set \u003ccode\u003epath\u003c/code\u003e option in vim. Key mappings like \u003ccode\u003egf\u003c/code\u003e, \u003ccode\u003e[i\u003c/code\u003e, \u003ccode\u003e[d\u003c/code\u003e, and\ncommands like \u003ccode\u003e:find\u003c/code\u003e depend on having your path set correctly to find the file you\u0026rsquo;re searching\nfor. Using the \u003ccode\u003e:find\u003c/code\u003e command also gives us the ability to tab complete a file name, a feature\nwhich fuzzy finders do not offer.\u003c/p\u003e\n\u003cp\u003eAn poorly set path can cause a significant slow down when trying to tab complete a filename with\n\u003ccode\u003e:find\u003c/code\u003e, or jump to a file with \u003ccode\u003egf\u003c/code\u003e, especially if you work with languages like javascript where\nprojects contain the fathomless void known as \u003ccode\u003enode_modules\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn his \u003ca href=\"https://gist.github.com/romainl/7e2b425a1706cd85f04a0bd8b3898805\"\u003eexcellent gist\u003c/a\u003e, romainl\nillustrates how a well set path can make navigating a codebase quick and easy, capturing only the\nfiles relevant to our work in a project. However, in his gist he sets the path manually, what I want\nto do is automatically set the path on a per-project basis. My answer to this, is to use \u003ca href=\"https://github.com/sharkdp/fd\"\u003efd\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cp\u003eI added the following code to my \u003ccode\u003einit.lua\u003c/code\u003e, but it can work in vimscript and in regular vim as\nwell! This requires that you have the \u003ccode\u003efd\u003c/code\u003e binary installed on your machine.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003evim.o.path = table.concat(vim.fn.systemlist(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;fd . --type d\u0026#34;\u003c/span\u003e),\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince \u003ccode\u003efd\u003c/code\u003e will respect your \u003ccode\u003e.gitignore\u003c/code\u003e file, the above code will set every directory currently\ntracked by git in your path, ensuring that you can access your project files without having to deal\nwith slowdowns caused by vim looking inside of directories such as \u003ccode\u003enode_modules\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eTo speed things up when you open a directory in a path that is not currently tracked by git, you\ncan use the following snippet:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e setPath = \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e()\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e gitBranch() ~= \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;.,\u0026#34;\u003c/span\u003e .. table.concat(vim.fn.systemlist(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;fd . --type d --hidden -E .git -E .yarn\u0026#34;\u003c/span\u003e),\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e):gsub(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;%./\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e) .. \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e .. table.concat(vim.fn.systemlist(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;fd --type f --max-depth 1\u0026#34;\u003c/span\u003e), \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;,\u0026#34;\u003c/span\u003e):gsub(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;%./\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- grab both the dirs and the top level filesystem\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eelse\u003c/span\u003e\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e vim.o.path\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\nvim.o.path = setPath()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","desc":"Easily set your vim path per project and get only the files you want.","permalink":"https://teukka.tech/posts/vimtip-path/","section":"posts","tags":["neovim","vim","lua","productivity"],"title":"Neovim Tip, Smarter Path"},{"contents":"\u003cp\u003eIndieweb is the type of federated web3 I want to see rather than the introduction of artificial scarcity and an ecologically ruinous accounting system that encompasses current blockchain tech.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/24821/","section":"updates","tags":["technology"],"title":""},{"contents":"\u003cp\u003eComputers are excellent tools for inducing altered states of consciousness. Unfortunately, these states are most likely to be fed by feelings of fear, anxiety, anger, or insecurity, with a distinctive outward focus, rather than looking inward and trying to augment more enlightened parts of ourselves like with more traditional spiritual tools.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/56596/","section":"updates","tags":["computation"],"title":""},{"contents":"\u003cp\u003eCreating a crappy version of something is the first step to creating a better version of something. It also helps you know what you don\u0026rsquo;t know :)\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/44844/","section":"updates","tags":["programming"],"title":""},{"contents":"\u003cp\u003e\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Mushrooms growning in a decaying part of a tree\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1858.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1858.webp\"\n        alt=\"Mushrooms growning in a decaying part of a tree\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eMushroom hotel\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Bright yellow chanterelle mushrooms\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1860.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1860.webp\"\n        alt=\"Bright yellow chanterelle mushrooms\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eChanterelles\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Large growth surrounding a tree\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1859.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1859.webp\"\n        alt=\"Large growth surrounding a tree\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eMini biome\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Panorama of a Finnish forest in fall, dead ferns cover the ground\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1862.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1862.webp\"\n        alt=\"Panorama of a Finnish forest in fall, dead ferns cover the ground\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eMetsä!\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Large anthill resting underneath a tree\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1863.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1863.webp\"\n        alt=\"Large anthill resting underneath a tree\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eBig ol\u0026#39; anthill\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Mushrooms growing out of a bank of collapsed soil\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1864.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1864.webp\"\n        alt=\"Mushrooms growing out of a bank of collapsed soil\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eMushrooooooms\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Mushrooms growing out of a log, surrounded by leaves\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1865.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1865.webp\"\n        alt=\"Mushrooms growing out of a log, surrounded by leaves\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eMagical mycota\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\u003c/p\u003e\n","desc":"Pictures I took while picking mushrooms","permalink":"https://teukka.tech/photos/09-25-2021/","section":"photos","tags":[],"title":"Mushrom Foraging Trip"},{"contents":"\u003cp\u003e\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Crossing a bridge in the fall over a small stream, a girl is in the foreground\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/bridge_finland.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/bridge_finland.webp\"\n        alt=\"Crossing a bridge in the fall over a small stream, a girl is in the foreground\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eFall, near Raasepori\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Sunset over the sea, foreground covered in dried reeds\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/island_near_raasepori.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/island_near_raasepori.webp\"\n        alt=\"Sunset over the sea, foreground covered in dried reeds\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eSunset in fall\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Sunset over lake Saimaa, boat and people in the foreground\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/saimaa_boat.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/saimaa_boat.webp\"\n        alt=\"Sunset over lake Saimaa, boat and people in the foreground\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eLake Saimaa\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Overcast day overlooking a meadow in Lapland\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/lapland.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/lapland.webp\"\n        alt=\"Overcast day overlooking a meadow in Lapland\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eLapland\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Sunset poking through a pine tree on the coast\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/tree_on_island.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/tree_on_island.webp\"\n        alt=\"Sunset poking through a pine tree on the coast\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eSunset near Raasepori\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\u003c/p\u003e\n","desc":"General Finland appreciation album :)","permalink":"https://teukka.tech/photos/finland/","section":"photos","tags":[],"title":"Finland"},{"contents":"\u003cp\u003e\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"blueish purple mushroom\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1830.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1830.webp\"\n        alt=\"blueish purple mushroom\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eBlueish purple mushroom\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"bright yellow mushroom\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1833.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1833.webp\"\n        alt=\"bright yellow mushroom\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eBright yellow mushroom\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"dense cluster of light brown mushrooms\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1835.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1835.webp\"\n        alt=\"dense cluster of light brown mushrooms\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eDense cluster of light brown mushrooms\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"two bright red mushrooms\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1836.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1836.webp\"\n        alt=\"two bright red mushrooms\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eTwo bright red mushrooms\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"large brown mushroom growing from a fallen tree\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1837.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1837.webp\"\n        alt=\"large brown mushroom growing from a fallen tree\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eLarge brown mushroom growing from a fallen tree\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"two large mushroom, I think of genus Amanita\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1839.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1839.webp\"\n        alt=\"two large mushroom, I think of genus Amanita\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eTwo large mushroom, I think of genus Amanita\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"two mushrooms that are deep brown, and almost purple\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1840.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1840.webp\"\n        alt=\"two mushrooms that are deep brown, and almost purple\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eTwo mushrooms that are deep brown, and almost purple\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Classic Amanita muscaria, the fairytale mushroom\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/IMG_1841.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/IMG_1841.webp\"\n        alt=\"Classic Amanita muscaria, the fairytale mushroom\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eClassic Amanita muscaria, the fairytale mushroom\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\u003c/p\u003e\n","desc":"Mushrooms that I found interesting.","permalink":"https://teukka.tech/photos/09-04-2021/","section":"photos","tags":[],"title":"Espoo Central Park"},{"contents":"\u003cp\u003e\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"View overlooking Lake Blance\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/lake_blanche.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/lake_blanche.webp\"\n        alt=\"View overlooking Lake Blance\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eLake Blanche\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"View overlooking Lake Mary\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/lake_mary.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/lake_mary.webp\"\n        alt=\"View overlooking Lake Mary\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eLake Mary\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"View overlooking Farmington, Utah\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/farmington.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/farmington.webp\"\n        alt=\"View overlooking Farmington, Utah\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eFarmington\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\u003c/p\u003e\n","desc":"Beautiful summit photos from hikes","permalink":"https://teukka.tech/photos/utah-2021/","section":"photos","tags":[],"title":"Utah, Summer"},{"contents":"\u003cp\u003eWhat started out as \u003ca href=\"https://teukka.tech/updates/57598/\"\u003ean idea\u003c/a\u003e is now officially available to try! Introducing the beta version of \u003ca href=\"https://github.com/jamestthompson3/tendril-wiki\"\u003etendril-wiki\u003c/a\u003e, trying to bring what I love from TiddlyWiki and Hugo and make it my own!\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/53122/","section":"updates","tags":["tools for thought"],"title":""},{"contents":"\u003cp\u003eSomething that is really hard to capture with a type system is how values change over time. For example, I could have a type of \u003ccode\u003enull\u003c/code\u003e when I boot my app, but then have that same data structure have a type \u003ccode\u003estring\u003c/code\u003e after a certain point in time. There’s not a great way to tell type systems, “after a certain series of events, if this process is still running, this will be of a certain type”\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/45594/","section":"updates","tags":[],"title":""},{"contents":"\u003cp\u003eFinnish summer weather is so nice that it tricks you into thinking that winter doesn’t exist.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/44523/","section":"updates","tags":[],"title":""},{"contents":"\u003cp\u003eThe more I use Rust, the more I appreciate how good the built in tooling is. Not having to configure separate test runners, packagers, package managers, etc for each project results in a huge reduction of mental overhead and allows you to just focus on writing code\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/35750/","section":"updates","tags":["programming","rust"],"title":""},{"contents":"\u003cp\u003eIt’s true we can’t encode our values into general-purpose software,10 but we’re not simply atomized technologists, and our worlds are not bounded by the interfaces we expose. We share a collective responsibility for what we create, and are capable of collectively acting on that responsibility.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/trapped-in-the-technologist-factory/","section":"bookmarks","tags":[],"title":"trapped in the technologist factory"},{"contents":"\u003cp\u003eRE: \u003ca href=\"https://teukka.tech/updates/57598/\"\u003ethis\u003c/a\u003e, I started a TiddlyWiki meets Hugo project to try and get all my info in the same format.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/70579/","section":"updates","tags":["tools for thought"],"title":""},{"contents":"\u003cp\u003eThinking about what sort of tools and processes I can change to tighten up the collection, curation, creation loop.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/57598/","section":"updates","tags":["tools for thought"],"title":""},{"contents":"\u003cp\u003eOne goal of a review process is good code. Another goal of a review is good coders. The review is a perfect mentorship opportunity, it is a way to increase contributor’s TRM.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/two-kinds-of-code-review/","section":"bookmarks","tags":["programming","code-review"],"title":"Two Kinds of Code Review"},{"contents":"\u003cp\u003eWhat is it about analog photography that is so satisfying? The feeling of all the mechanical parts? The absence of social pressure to edit and post? The finality of a roll of film?\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/33312/","section":"updates","tags":["photography"],"title":""},{"contents":"\u003cp\u003eOf all the Finnish cultural traditions, I think I enjoy sauna the most.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/67761/","section":"updates","tags":[],"title":""},{"contents":"\u003cp\u003eI didn’t go looking for grief this afternoon, but it found me anyway, and I have designers and programmers to thank for it.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/inadvertent-algorithmic-cruelty/","section":"bookmarks","tags":["tech and society","programming"],"title":"Inadvertent Algorithmic Cruelty"},{"contents":"\u003ch2 id=\"goals\"\u003eGoals\u003c/h2\u003e\n\u003cp\u003eThis aims to be quick reference guide on lua module exports compared to JavaScript module exports.\u003c/p\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cp\u003eWe want to export a series of module scoped functions in both JavaScript and Lua. This guide also show side by side comparisons on writing a file to a specific directory and deleting a file from the same directory.\u003c/p\u003e\n\u003cp\u003eIn this quick tip, we will use CommonJS as the format for the JavaScript modules since it more closely resembles Lua modules in its construction.\u003c/p\u003e\n\u003cp\u003eTo export modules in NodeJS we would write:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#0f0\"\u003e// filesystemUtils.js\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e util = require(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;util\u0026#34;\u003c/span\u003e)\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e readFile = util.promisify(fs.readFile);\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e writeFile = util.promisify(fs.writeFile);\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e readDir = util.promisify(fs.readdir);\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e deleteFile = util.promisify(fs.unlink);\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e writeDataFile(name, data) {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e dataDir = getDataDir();\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e filePath = \u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003edataDir\u003cspan style=\"color:#87ceeb\"\u003e}${\u003c/span\u003ename\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e.json`\u003c/span\u003e;\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e writeFile(filePath, JSON.stringify(data));\n}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e deleteDataFile(name) {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e dataDir = getDataDir();\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e filePath = \u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003edataDir\u003cspan style=\"color:#87ceeb\"\u003e}${\u003c/span\u003ename\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e.json`\u003c/span\u003e;\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e deleteFile(filePath);\n}\n\nmodule.exports = {\n  writeDataFile,\n  deleteDataFile\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhere \u003ccode\u003ewriteDataFile\u003c/code\u003e and \u003ccode\u003edeleteDataFile\u003c/code\u003e are the function being exported. We could them access them by requiring the \u003ccode\u003efilesystemUtils\u003c/code\u003e module:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e fs_utils = require(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./filesystemUtils\u0026#34;\u003c/span\u003e)\n\nfs_utils.writeDataFile(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e)\nfs_utils.deleteDataFile(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn Lua, the syntax is quite similar:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- filesystemUtils.lua\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {} \u003cspan style=\"color:#0f0\"\u003e-- initialize an empty table (or object in JS terms)\u003c/span\u003e\n\n\u003cspan style=\"color:#0f0\"\u003e-- re-assign functions for convienience\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e uv = vim.loop\n\n\u003cspan style=\"color:#0f0\"\u003e-- assign the function to a key of the same name in the table\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003edeleteDataFile\u003c/span\u003e(name)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e dataDir = getDataDir()\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e filePath = dataDir .. name .. \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;.json\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e uv.fs_unlink(filePath)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003ewriteDataFile\u003c/span\u003e(name, data)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e dataDir = getDataDir()\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e filePath = dataDir .. name .. \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;.json\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e uv.fs_open(filePath, \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e (err, fd)\n      \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (err) \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n      uv.fs_write(fd, data, \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e(err, bytes_written)\n        \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (err) \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n        uv.fs_close(fd, \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e(err)\n          \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (err) \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n        \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e)\n      \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M \u003cspan style=\"color:#0f0\"\u003e-- This line exports the table\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can then use these functions in other code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e fs_utils = require(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;filesystemUtils\u0026#34;\u003c/span\u003e)\n\nfs_utils.writeDataFile(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e)\nfs_utils.deleteDataFile(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;test\u0026#34;\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUsing modules in lua helps keep the global scope clean and makes it easier to refactor and reorganize code.\u003c/p\u003e\n","desc":"A quick overview on exporting lua code as modules","permalink":"https://teukka.tech/posts/js-to-lua-modules/","section":"posts","tags":["lua","libuv","neovim"],"title":"(Nvim) Lua for Javascripters: Module Exports"},{"contents":"\u003cp\u003eThreads are a seemingly straightforward adaptation of the dominant sequential model of computation to concurrent systems.  Languages require little or no syntactic changes to sup-port threads, and operating systems and architectures have evolved to efficiently support them.Many technologists are pushing for increased use of multithreading in software in order to take advantage of the predicted increases in parallelism in computer architectures.  In this paper, I argue that this is not a good idea.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/the-problem-with-threads/","section":"bookmarks","tags":["programming"],"title":"The Problem with Threads"},{"contents":"\u003cp\u003e\u0026ldquo;humans are quickly overwhelmed by concurrency and find it much more difficult to reason about concurrent than sequential code. Even careful people miss possible inter-leavings among even simple collections of partially ordered operations.\u0026rdquo;\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eH. Sutter and J. Larus. Software and the concurrency revolution.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe fact that source code starts its life as text is part of what makes wrapping my head around concurrent programs difficult. Closure syntax like that in Rust\u0026rsquo;s \u003ccode\u003estd::thread::spawn\u003c/code\u003e certainly help, but it still gets very tricky to keep things straight. I wonder what a non text interface for concurrent programming would look like\u0026hellip;\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/54883/","section":"updates","tags":["programming"],"title":""},{"contents":"\u003cp\u003eDesktop installable PWAs from Firefox would be so awesome\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/66715/","section":"updates","tags":["web"],"title":""},{"contents":"\u003cp\u003eI want an app that’s just Spotify, but is actually Bandcamp.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/57857/","section":"updates","tags":[],"title":""},{"contents":"\u003cp\u003eNew goal: make \u003ca href=\"https://quill.p3k.io/\"\u003equill\u003c/a\u003e into a PWA\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/78293/","section":"updates","tags":["indieweb"],"title":""},{"contents":"\u003cp\u003eTrying \u003ca href=\"https://awesomewm.org/\"\u003eawesomewm\u003c/a\u003e again. This time I didn\u0026rsquo;t copy-paste someone else\u0026rsquo;s config and it\u0026rsquo;s going much smoother!\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/80998/","section":"updates","tags":["linux"],"title":""},{"contents":"\u003cp\u003eWishing there was a way to compile \u0026ldquo;self contained\u0026rdquo; binaries with luvit. It seems that you still need to have libs like luvit in your path to run the binary when you compile your projects.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/39029/","section":"updates","tags":["lua"],"title":""},{"contents":"\u003cp\u003eHad a great time at the virtual indieweb meetup! Very cool to see what everyone was working on!\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/80438/","section":"updates","tags":["indieweb"],"title":""},{"contents":"\u003cp\u003eMaking the switch from \u003ca href=\"https://github.com/alacritty/alacritty\"\u003ealacritty\u003c/a\u003e to \u003ca href=\"https://sw.kovidgoyal.net/kitty/\"\u003ekitty\u003c/a\u003e and it\u0026rsquo;s really great to have the multiplexer built into the terminal!\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/49957/","section":"updates","tags":["development","tools"],"title":""},{"contents":"\u003ch2 id=\"goals\"\u003eGoals\u003c/h2\u003e\n\u003cp\u003eThis should be a quick reference guide for those familiar with NodeJS on how to execute the same async tasks in Lua using luv. This is aimed towards use cases inside Neovim, but is not limited to those cases.\u003c/p\u003e\n\u003ch2 id=\"task\"\u003eTask\u003c/h2\u003e\n\u003cp\u003eWe want to spawn a child task to convert a markdown document into HTML using \u003ca href=\"https://pandoc.org/\"\u003epandoc\u003c/a\u003e. This could be used as part of a publishing flow for a blog, for writing notes, or for implementing a markdown previewer.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#0f0\"\u003e// in Node we could do it like this:\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e {spawn} = require(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;child_process\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e [sourceFile, destinationFile] = process.argv.slice(\u003cspan style=\"color:#f60\"\u003e2\u003c/span\u003e)\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e convert = spawn(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;pandoc\u0026#39;\u003c/span\u003e, [sourceFile, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--from\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;gfm\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--to\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;html5\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-o\u0026#39;\u003c/span\u003e, destinationFile, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-s\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--highlight-style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;tango\u0026#39;\u003c/span\u003e])\n\nconvert.stderr.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;data\u0026#39;\u003c/span\u003e, (data) =\u0026gt; {\n  console.error(data);\n});\n\nconvert.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;close\u0026#39;\u003c/span\u003e, (code) =\u0026gt; {\n  console.log(\u003cspan style=\"color:#87ceeb\"\u003e`child process exited with code \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003ecode\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn Lua, the code looks very similar, but a bit more verbose:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- The same as before, but this time we want to generate the file names \u003c/span\u003e\n\u003cspan style=\"color:#0f0\"\u003e-- based on the file we are currently editing instead of passing them as commandline args\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003econvert\u003c/span\u003e()\n  \u003cspan style=\"color:#0f0\"\u003e-- cut off the `.md` part of the file\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e destinationFile = vim.fn.expand(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%:t:r\u0026#39;\u003c/span\u003e)\n  \u003cspan style=\"color:#0f0\"\u003e-- the name of the file you\u0026#39;re editing\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e sourceFile = api.nvim_buf_get_name(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e)\n  spawn(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;pandoc\u0026#39;\u003c/span\u003e, {\n    args = {sourceFile, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--from\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;gfm\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--to\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;html5\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-o\u0026#39;\u003c/span\u003e, string.format(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%s.html\u0026#39;\u003c/span\u003e, destinationFile), \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-s\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--highlight-style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;tango\u0026#39;\u003c/span\u003e},\n  }, \n  {stdout = \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e()\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e, stderr = \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e(data) print(data) \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e},\n  \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e(code) \u003cspan style=\"color:#0f0\"\u003e-- we want to call this function when the process is done\u003c/span\u003e\n    print(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;child process exited with code \u0026#39;\u003c/span\u003e .. string.format(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%d\u0026#39;\u003c/span\u003e, code))\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003espawn\u003c/span\u003e(cmd, opts, input, onexit)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e handle, pid\n  \u003cspan style=\"color:#0f0\"\u003e-- open an new pipe for stdout\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stdout = vim.loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e)\n  \u003cspan style=\"color:#0f0\"\u003e-- open an new pipe for stderr\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stderr = vim.loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e)\n  handle, pid = vim.loop.spawn(cmd, vim.tbl_extend(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;force\u0026#34;\u003c/span\u003e, opts, {stdio = {stdout; stderr;}}), \n  \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e(code, signal)\n    \u003cspan style=\"color:#0f0\"\u003e-- call the exit callback with the code and signal\u003c/span\u003e\n    onexit(code, signal)\n    \u003cspan style=\"color:#0f0\"\u003e-- stop reading data to stdout\u003c/span\u003e\n    vim.loop.read_stop(stdout)\n    \u003cspan style=\"color:#0f0\"\u003e-- stop reading data to stderr\u003c/span\u003e\n    vim.loop.read_stop(stderr)\n    \u003cspan style=\"color:#0f0\"\u003e-- safely shutdown child process\u003c/span\u003e\n    safe_close(handle)\n    \u003cspan style=\"color:#0f0\"\u003e-- safely shutdown stdout pipe\u003c/span\u003e\n    safe_close(stdout)\n    \u003cspan style=\"color:#0f0\"\u003e-- safely shutdown stderr pipe\u003c/span\u003e\n    safe_close(stderr)\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e)\n  \u003cspan style=\"color:#0f0\"\u003e-- read child process output to stdout\u003c/span\u003e\n  vim.loop.read_start(stdout, input.stdout)\n  \u003cspan style=\"color:#0f0\"\u003e-- read child process output to stderr\u003c/span\u003e\n  vim.loop.read_start(stderr, input.stderr)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003esafe_close\u003c/span\u003e(handle)\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e not vim.loop.is_closing(handle) \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    vim.loop.close(handle)\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne of the major differences is that in Lua you are responsible for cleaning up both the process handle and any pipes you have open to receive data from that handle. It then becomes useful to create a more generalized \u003ccode\u003espawn\u003c/code\u003e function to handle all of these things under the hood, allowing you to just call \u003ccode\u003espawn\u003c/code\u003e in a similar manner to the NodeJS API.\u003c/p\u003e\n","desc":"A quick overview on how to handle async processes in luv in Neovim","permalink":"https://teukka.tech/posts/js-to-lua/","section":"posts","tags":["lua","libuv","neovim"],"title":"(Nvim) Lua for Javascripters: Spawning Processes"},{"contents":"\u003cp\u003eDay 3 of 30 fitness challenge ✅\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/53876/","section":"updates","tags":["fitness"],"title":""},{"contents":"\u003cp\u003eWondering if there are any guides out there for using lua for build scripting. Seems like it would be faster than spinning up a nodevm, easier to read and reason about that monster bash scripts, and less maintenance than a project written in something like Go or Rust.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/37805/","section":"updates","tags":["development","lua"],"title":""},{"contents":"\u003cp\u003eBeen reading Catherine Liu‘s excellent book, \u003cstrong\u003eVirtue Hoarders\u003c/strong\u003e and it captures a lot of my own sentiment about politics and culture in a fast paced and exciting style.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/54987/","section":"updates","tags":["politics","readinglist"],"title":""},{"contents":"\u003cp\u003eThinking about the best way to integrate my existing tiddlywiki into my current website\u0026hellip; Converting everything is a ton of work :(\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/67516/","section":"updates","tags":[],"title":""},{"contents":"\u003cp\u003eI wonder what a bookclub over micropub/sub might look like, or how xanadu like inclusions could be implemented on the indieweb.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/56784/","section":"updates","tags":["indieweb"],"title":""},{"contents":"\u003cp\u003eI\u0026rsquo;ve enjoyed using Hugo to build out my personal website. It makes it so easy to just focus on the fun stuff without worrying about all the tooling you need to generate really great static sites. It\u0026rsquo;s also super fast!\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/44624/","section":"updates","tags":["webdev"],"title":""},{"contents":"\u003cp\u003eReally amazing feeling when you finally get everything working and can close all your tabs! Getting closer to a great indieweb home on the internet.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/85083/","section":"updates","tags":["indieweb"],"title":""},{"contents":"\u003cp\u003eTesting my new \u0026ldquo;serverless\u0026rdquo; micropub server integration!\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/73747/","section":"updates","tags":["indieweb","testing"],"title":""},{"contents":"\u003cp\u003equick update to test vercel integration again\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/updates/72696/","section":"updates","tags":["devops","web","testing"],"title":""},{"contents":"\u003cp\u003eSee the demo site and write up \u003ca href=\"https://teukka.tech/viiksetjsretro.html\"\u003ehere\u003c/a\u003e\u003c/p\u003e\n","desc":"Looking back at my first open source library","permalink":"https://teukka.tech/posts/viiksetretro/","section":"posts","tags":["javascript","data visualization","open source"],"title":"Looking back at ViiksetJS"},{"contents":"\u003ch3 id=\"what-is-peer-discovery\"\u003eWhat is Peer discovery\u003c/h3\u003e\n\u003cp\u003ePeer discovery allows you to discover other computers on the same subnet, intranet, or through the internet. Discovering peers directly removes the necessity of a centralized server architecture, reducing the number of network jumps your packets require to share information with each other. Peer discovery can be used in: discovering microservices in the same docker network or kubernetes cluster, file sharing (like airdrop and bittorrent), and peer to peer gaming. Eliminating a centralized communication server can reduce operating costs, improve communication times between clients, and lead to more robust services since there is no single point of failure. Taking advantage of the benefits listed above requires a decentralized architecture.\u003c/p\u003e\n\u003ch3 id=\"multicast-groups\"\u003eMulticast Groups\u003c/h3\u003e\n\u003cp\u003eMulticasting is one of the tools we can use in creating a decentralized system. Multicasting is the process where messages are sent to a group of participants on the network. Multicasting differs from Broadcasting by only sending data to a specified \u003cem\u003egroup\u003c/em\u003e of network nodes, whereas broadcasting sends data to all network nodes. Implementing multicasting incurs a distinct set of challenges compared to centralized architectures; consider the following listed by Microsoft\u0026rsquo;s article about \u003ca href=\"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2003/cc759719(v=ws.10)\"\u003eIPV4 Multicasting\u003c/a\u003e:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMulticast traffic is sent to an ambiguous group destination.\u003c/li\u003e\n\u003cli\u003eBecause group addresses represent different groups with different members, group addresses generally cannot be summarized in the IP multicast forwarding table.\u003c/li\u003e\n\u003cli\u003eThe location of group members is not consistent, so the IP multicast forwarding table might need to be updated whenever a group member joins or leaves a multicast group. Multicast routing protocols update the IP multicast forwarding table.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBecause the challenges like those listed above, reasoning about multicast traffic requires different mental model than a traditional client-server architecture. A critical concept in multicasting the \u003cem\u003emulticast group\u003c/em\u003e. A multicast group can be compared to a chat application: membership is dynamic; members can leave and join at will, group members can be located anywhere on a multicast enabled network (compared to a server with a static IP address), a host can be a member of as many multicast groups as desired. A multicast group \u003cem\u003ecan\u003c/em\u003e have a well known address, for example 224.0.0.1 is the multicast address for all hosts in the subnet.\u003c/p\u003e\n\u003cp\u003eMembers of multicast groups listening for incoming traffic will first bind their UDP socket to an available interface and join the multicast group. After joining the group, this member can receive datagram packets on the bound interface without the other members of the group knowing it\u0026rsquo;s specific IP address. A similar process goes for multicast group members sending data to the group. Senders will bind their UDP socket on an available interface and begin transmitting datagram packets to the multicast group address. Through the magic of multicasting, the sender does not require information other than the group address for their packets to reach group members who are listening for incoming data.\u003c/p\u003e\n\u003ch3 id=\"diving-into-the-code\"\u003eDiving into the code\u003c/h3\u003e\n\u003cp\u003eTo start multicasting over UDP requires only a few lines of code. For this post, we\u0026rsquo;ll create a small program which sends a username to members of a multicast group. First, we want to set up a listener for other peers sending data to the multicast group. To do this, we need to bind the UDP socket to an available interface and join the multicast group:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#f00\"\u003euse\u003c/span\u003e std::net::{Ipv4Addr, SocketAddrV4, UdpSocket};\n\n\u003cspan style=\"color:#f00\"\u003estatic\u003c/span\u003e MULTI_CAST_ADDR: Ipv4Addr = Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e224\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e);\n\n\u003cspan style=\"color:#f00\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003elisten\u003c/span\u003e() {\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket_address: SocketAddrV4 = SocketAddrV4::new(Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e bind_addr = Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket = UdpSocket::bind(socket_address)?;\n  println!(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Listening on: {}\u0026#34;\u003c/span\u003e, socket.local_addr().unwrap());\n  socket.join_multicast_v4(\u0026amp;MULTI_CAST_ADDR, \u0026amp;bind_addr)?;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNotice we create a new IP address struct with the values, \u003ccode\u003e0, 0, 0, 0\u003c/code\u003e, which the equivalent of saying \u0026ldquo;Any available IP interface\u0026rdquo;.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e dgram from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;dgram\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e MULTI_CAST_ADDR = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;224.0.0.1\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e listen() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e server = dgram.createSocket(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;udp4\u0026#34;\u003c/span\u003e);\n  server.bind(\u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e, () =\u0026gt; {\n    server.addMembership(MULTI_CAST_ADDR);\n  });\n  server.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;listening\u0026#34;\u003c/span\u003e, () =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e address = server.address();\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e`Listening on: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eaddress.address\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eaddress.port\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eMULTI_CAST_ADDR\u003c/code\u003e points an IP address, \u003ccode\u003e224.0.0.1\u003c/code\u003e, as stated earlier, this is the reserved multicast address for all systems on the current subnet. Since the code is listening for messages being sent to the multicast group, we need to \u003cem\u003ejoin\u003c/em\u003e the group \u003cem\u003ein addition to\u003c/em\u003e binding the socket on an available IP Interface. In contrast to a server listening to incoming HTTP connections, we not only bind our server to a local IP address and a port, but we also join a multicast group whose address is part of the subnet. Since we are binding the UDP server to a local address and port \u003cem\u003eand\u003c/em\u003e joining the multicast group, it can receive data from a direct connection ( like HTTP ), \u003cem\u003eand\u003c/em\u003e from the multicast group.\u003c/p\u003e\n\u003cp\u003eNow time for the logic for receiving the multicast group data. Luckily, whether the data coming from the multicast group or from a direct connection, the code the same.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#f00\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003elisten\u003c/span\u003e() -\u0026gt; Result\u0026lt;()\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket_address: SocketAddrV4 = SocketAddrV4::new(Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e);\n    \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e bind_addr = Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e);\n    \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket = UdpSocket::bind(socket_address)?;\n    println!(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Listening on: {}\u0026#34;\u003c/span\u003e, socket.local_addr().unwrap());\n    socket.join_multicast_v4(\u0026amp;MULTI_CAST_ADDR, \u0026amp;bind_addr)?;\n    \u003cspan style=\"color:#f00\"\u003eloop\u003c/span\u003e {\n        \u003cspan style=\"color:#0f0\"\u003e// set up message buffer with size of 120 bytes\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003emut\u003c/span\u003e buf = [\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#f60\"\u003e120\u003c/span\u003e];\n        \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e (data, origin) = socket.recv_from(\u0026amp;\u003cspan style=\"color:#f00\"\u003emut\u003c/span\u003e buf)?;\n        \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e buf = \u0026amp;\u003cspan style=\"color:#f00\"\u003emut\u003c/span\u003e buf[..data];\n        \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e message = String::from_utf8(buf.to_vec()).unwrap();\n        println!(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;server got: {} from {}\u0026#34;\u003c/span\u003e, message, origin);\n    }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e listen() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e server = dgram.createSocket(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;udp4\u0026#34;\u003c/span\u003e);\n  \u003cspan style=\"color:#0f0\"\u003e// Listen for incoming messages\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e  server.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e, (msg, rinfo) =\u0026gt; {\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e`server got: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003emsg\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e from \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003erinfo.address\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003erinfo.port\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  });\n  server.bind(\u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e, (a) =\u0026gt; {\n    server.addMembership(MULTI_CAST_ADDR);\n  });\n  server.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;listening\u0026#34;\u003c/span\u003e, () =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e address = server.address();\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e`Listening on: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eaddress.address\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eaddress.port\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  });\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter setting up logic for listening to incoming messages on the multicast group address, our basic server is done! Now we can create the function that will send packets to the multicast address:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#f00\"\u003euse\u003c/span\u003e std::net::{Ipv4Addr, SocketAddrV4, UdpSocket};\n\n\u003cspan style=\"color:#f00\"\u003estatic\u003c/span\u003e MULTI_CAST_ADDR: Ipv4Addr = Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e224\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e);\n\n\u003cspan style=\"color:#f00\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003ecast\u003c/span\u003e() -\u0026gt; Result\u0026lt;()\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket_address: SocketAddrV4 = SocketAddrV4::new(Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e);\n    \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket = UdpSocket::bind(socket_address)?;\n    socket.connect(SocketAddrV4::new(MULTI_CAST_ADDR, \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e))?;\n    \u003cspan style=\"color:#0f0\"\u003e// Don\u0026#39;t send messages to yourself.\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#0f0\"\u003e// In this case self discovery is for human developers, not machines.\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e    socket.set_multicast_loop_v4(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e)?;\n    \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e data = String::from(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;{\\\u0026#34;username\\\u0026#34;: \\\u0026#34;test\\\u0026#34;}\u0026#34;\u003c/span\u003e)\n     \u003cspan style=\"color:#f00\"\u003eloop\u003c/span\u003e {\n        socket.send(data.as_bytes())?;\n        thread::sleep(time::Duration::from_secs(\u003cspan style=\"color:#f60\"\u003e2\u003c/span\u003e));\n    }\n    Ok(())\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e dgram from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;dgram\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e MULTI_CAST_ADDR = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;224.0.0.1\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e cast() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e client = dgram.createSocket(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;udp4\u0026#34;\u003c/span\u003e);\n  setInterval(() =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e message = Buffer.from(JSON.stringify({ username: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;hackerman1337\u0026#34;\u003c/span\u003e }));\n    client.send(message, \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e, MULTI_CAST_ADDR);\n  }, \u003cspan style=\"color:#f60\"\u003e2000\u003c/span\u003e);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUnlike the \u003ccode\u003elisten\u003c/code\u003e function, when we are sending data to the multicast address, we don\u0026rsquo;t need to join the multicast group. Since we are using UDP for peer discovery, we can fire and forget these messages from the \u003ccode\u003ecast\u003c/code\u003e function as there will be no response from the server.\u003c/p\u003e\n\u003cp\u003eTo test our peer discovery functions, you need two computers connected to the same subnet, or two docker containers running in the same docker network, or a docker container and your computer. Note that while you don\u0026rsquo;t need to expose docker ports in order for the program running on your computer to discover the program running in the docker container, you will need to expose ports in order for your container to discover the host machine. We also need to combine our two functions so that we are both broadcasting our presence and listening for peers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#f00\"\u003euse\u003c/span\u003e std::thread;\n\n\u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003emain\u003c/span\u003e() {\n  thread::spawn(||{\n      listen();\n    });\n  cast();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e cluster from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;cluster\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e main() {\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (cluster.isMaster) {\n    cluster.fork();\n    listen();\n  } \u003cspan style=\"color:#f00\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (cluster.isWorker) {\n    cast();\n  }\n}\n\nmain();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat\u0026rsquo;s it! If you run the program on two different computers on the same subnet, or two docker containers in the same docker network, you can observe the peers are able to discover each other\u0026rsquo;s username and IP Address. The final code output:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-rust\" data-lang=\"rust\"\u003e\u003cspan style=\"color:#f00\"\u003euse\u003c/span\u003e std::net::{Ipv4Addr, SocketAddrV4, UdpSocket};\n\u003cspan style=\"color:#f00\"\u003euse\u003c/span\u003e std::thread;\n\n\u003cspan style=\"color:#f00\"\u003estatic\u003c/span\u003e MULTI_CAST_ADDR: Ipv4Addr = Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e224\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e);\n\n\u003cspan style=\"color:#f00\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003elisten\u003c/span\u003e() {\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket_address: SocketAddrV4 = SocketAddrV4::new(Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e bind_addr = Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket = UdpSocket::bind(socket_address)?;\n  println!(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Listening on: {}\u0026#34;\u003c/span\u003e, socket.local_addr().unwrap());\n  socket.join_multicast_v4(\u0026amp;MULTI_CAST_ADDR, \u0026amp;bind_addr)?;\n}\n\n\u003cspan style=\"color:#f00\"\u003epub\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003ecast\u003c/span\u003e() -\u0026gt; Result\u0026lt;()\u0026gt; {\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket_address: SocketAddrV4 = SocketAddrV4::new(Ipv4Addr::new(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e), \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e socket = UdpSocket::bind(socket_address)?;\n  socket.connect(SocketAddrV4::new(MULTI_CAST_ADDR, \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e))?;\n  \u003cspan style=\"color:#0f0\"\u003e// Don\u0026#39;t send messages to yourself.\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#0f0\"\u003e// In this case self discovery is for human developers, not machines.\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e  socket.set_multicast_loop_v4(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e)?;\n  \u003cspan style=\"color:#f00\"\u003elet\u003c/span\u003e data = String::from(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;{\\\u0026#34;username\\\u0026#34;: \\\u0026#34;test\\\u0026#34;}\u0026#34;\u003c/span\u003e)\n   \u003cspan style=\"color:#f00\"\u003eloop\u003c/span\u003e {\n    socket.send(data.as_bytes())?;\n    thread::sleep(time::Duration::from_secs(\u003cspan style=\"color:#f60\"\u003e2\u003c/span\u003e));\n  }\n  Ok(())\n}\n\n\u003cspan style=\"color:#f00\"\u003efn\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003emain\u003c/span\u003e() {\n  thread::spawn(||{\n      listen();\n    });\n  cast();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e dgram from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;dgram\u0026#34;\u003c/span\u003e;\n\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e cluster from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;cluster\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e MULTI_CAST_ADDR = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;224.0.0.1\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e listen() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e server = dgram.createSocket(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;udp4\u0026#34;\u003c/span\u003e);\n  server.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;message\u0026#34;\u003c/span\u003e, (msg, rinfo) =\u0026gt; {\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e`server got: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003emsg\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e from \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003erinfo.address\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003erinfo.port\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  });\n  server.bind(\u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e, (a) =\u0026gt; {\n    server.addMembership(MULTI_CAST_ADDR);\n  });\n  server.on(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;listening\u0026#34;\u003c/span\u003e, () =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e address = server.address();\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e`Listening on: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eaddress.address\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eaddress.port\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  });\n}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e cast() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e client = dgram.createSocket(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;udp4\u0026#34;\u003c/span\u003e);\n  setInterval(() =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e message = Buffer.from(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;TEST\u0026#34;\u003c/span\u003e);\n    client.send(message, \u003cspan style=\"color:#f60\"\u003e9778\u003c/span\u003e, MULTI_CAST_ADDR);\n  }, \u003cspan style=\"color:#f60\"\u003e2000\u003c/span\u003e);\n}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e main() {\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (cluster.isMaster) {\n    cluster.fork();\n    listen();\n  } \u003cspan style=\"color:#f00\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (cluster.isWorker) {\n    cast();\n  }\n}\n\nmain();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","desc":"Find and connect to other machines on your local network via UDP","permalink":"https://teukka.tech/posts/2020-07-12-peerdiscover/","section":"posts","tags":["nodeJS","Rust","systems programming"],"title":"Peer Discovery over UDP"},{"contents":"\u003ch2 id=\"let-em-know\"\u003eLet \u0026lsquo;Em Know\u003c/h2\u003e\n\u003cp\u003eWhile notifications are one of the browser features that are often abused and lead to obnoxious spam, there are still use cases where notifications enhance the experience of your web application. Modern browsers (with the exception of iOS Safari), support two types of notifications: \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Push_API\"\u003epush\u003c/a\u003e, and \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API\"\u003eweb\u003c/a\u003e. This post discusses \u003cem\u003eonly\u003c/em\u003e web notifications, since they do not require registration on a server, or the use of a service worker (although they can be used with both). After a short intro on how to set up web notifications, we\u0026rsquo;ll dive into an example where web notifications are a useful addition to your web app.\u003c/p\u003e\n\u003ch2 id=\"getting-started\"\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eTo start using web notifications you must request permissions from the user. Important note: you cannot request notification permissions over insecure connections, which means you must be serving your application over HTTPS or from your localhost. Once you are serving you app over HTTPS or from your localhost, requesting permissions is straight forward:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;h1\u0026gt;Permission Spam\u0026lt;/h1\u0026gt;\n\u0026lt;p\u0026gt;Your current notification status is: \u0026lt;span id=\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;permStatus\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\n\n\u0026lt;script\u0026gt;\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e status = document.getElementById(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;permStatus\u0026#34;\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e currentPermission = Notification.permission;\n  status.textContent = currentPermission;\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (currentPermission === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;denied\u0026#34;\u003c/span\u003e) {\n    Notification.requestPermission().then((result) =\u0026gt; {\n      status.textContent = result;\n    });\n  }\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe global \u003ccode\u003eNotification\u003c/code\u003e object exposes the \u003ccode\u003epermission\u003c/code\u003e property reflecting the current permission status and the \u003ccode\u003erequestPermission\u003c/code\u003e function which returns a promise resolving permission status given by the user after being prompted by the browser. In some browsers, such as Firefox 72 and onward, a popup requesting notifications won\u0026rsquo;t be displayed; the promise from \u003ccode\u003erequestPermission\u003c/code\u003e pends until the user clicks on the icon allowing notifications from their URL bar.\u003c/p\u003e\n\u003ch3 id=\"note-on-above-code\"\u003eNote on above code\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIn the snippet for above, the browser requests permissions as soon as the page is loaded. Additionally, if the user hasn\u0026rsquo;t allowed notification permissions, they will be asked every time they visit the page. This is a \u003cem\u003e\u003cem\u003ehorrible\u003c/em\u003e\u003c/em\u003e user experience. Nobody wants to be spammed with notifications, especially when no explanation of what type of events will trigger the notifications or how often they will be sent is given. Therefore, it is important that you never request notification permissions before giving an explanation of the notification behavior and after gathering user input for opting in.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor our examples, we will be using a \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API\"\u003eWeb Worker\u003c/a\u003e to manage the notification logic. This has the advantage of being off the main thread, which means that the logic is non-blocking and can be accessed via a global singleton for component based frameworks such as React, allowing all components to trigger notifications. One of the disadvantages of using a web worker for notifications is that the notifications are not triggered if the user closes the tab. To bypass that restriction, the example code will have to be executed in a \u003ca href=\"serviceworker.html\"\u003eService Worker\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"example-long-running-jobs\"\u003eExample: Long Running Jobs\u003c/h2\u003e\n\u003cp\u003eSome applications have long running jobs: processing an uploaded file, preparing data for download, executing a CI / CD pipeline, etc. Web notifications are a good way for users to \u0026ldquo;click and forget\u0026rdquo;, setting the job in motion and continue to other parts of the application or backgrounding the tab and continuing to browse without having to constantly check the status of their work. When the job has finished, they get a notification that lets them inspect the final output. Let\u0026rsquo;s get started!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026lt;!-- index.html --\u0026gt;\u003c/span\u003e\n\u0026lt;button onclick=\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;notifyOnDone()\u0026#34;\u003c/span\u003e\u0026gt;Notify me when this job finishes\u0026lt;/button\u0026gt;\n\u0026lt;span id=\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;permErr\u0026#34;\u003c/span\u003e style=\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;display:none; color:red;\u0026#34;\u003c/span\u003e\u0026gt;You must allow notifications to subscribe to this job\u0026lt;/span\u0026gt;\n\u0026lt;script\u0026gt;\n  \u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e notifyOnDone() {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e currentPerms = Notification.permission;\n    \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (currentPerms === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;denied\u0026#34;\u003c/span\u003e || currentPerms === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;default\u0026#34;\u003c/span\u003e) {\n      \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e result = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e Notification.requestPermission();\n      \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (result === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;denied\u0026#34;\u003c/span\u003e) {\n        document.getElementById(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;permErr\u0026#34;\u003c/span\u003e).style.display = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;block\u0026#34;\u003c/span\u003e;\n      }\n    }\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e notifierWorker = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Worker(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;notifier.js\u0026#34;\u003c/span\u003e);\n    notifierWorker.postMessage({ jobId: \u003cspan style=\"color:#f60\"\u003e123\u003c/span\u003e });\n  }\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSince our examples don\u0026rsquo;t rely on the Push API, we\u0026rsquo;ll implement the checks via long polling in our web worker:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#0f0\"\u003e// notifier.js\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003eonmessage = \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e (e) {\n  \u003cspan style=\"color:#f00\"\u003eswitch\u003c/span\u003e (e.data.type) {\n    \u003cspan style=\"color:#f00\"\u003ecase\u003c/span\u003e \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;JOB_START\u0026#34;\u003c/span\u003e:\n      watchForJobWithId(e.data.jobId);\n      \u003cspan style=\"color:#f00\"\u003ebreak\u003c/span\u003e;\n    \u003cspan style=\"color:#f00\"\u003edefault\u003c/span\u003e:\n      \u003cspan style=\"color:#f00\"\u003ebreak\u003c/span\u003e;\n  }\n};\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e watchForJobWithId(jobId) {\n  \u003cspan style=\"color:#0f0\"\u003e// long polling\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e pollChanges = setInterval(() =\u0026gt; {\n    fetch(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;/jobs/completed\u0026#34;\u003c/span\u003e)\n      .then((res) =\u0026gt; res.json())\n      .then(({ jobs }) =\u0026gt; {\n        \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e foundJob = jobs.find((job) =\u0026gt; job.id === jobId);\n        \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (foundJob) {\n          \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e jobDoneNotificiation = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Notification(\n            \u003cspan style=\"color:#87ceeb\"\u003e`Job finished with status: \\n\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003efoundJob.status\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e,\n            {\n              body: foundJob.error ? \u003cspan style=\"color:#87ceeb\"\u003e`Error Code: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003efoundJob.error\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e : \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e,\n            }\n          );\n        }\n        clearInterval(pollChanges);\n      });\n  }, \u003cspan style=\"color:#f60\"\u003e30_000\u003c/span\u003e);\n  window.onunload = () =\u0026gt; pollChanges \u0026amp;\u0026amp; clearInterval(pollChanges);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen users click the subscribe button, our worker polls the backend to see if the job has completed. If the job has finished, the worker triggers the notification with the status and any messages that are attached.\u003c/p\u003e\n\u003ch2 id=\"duly-noted\"\u003eDuly Noted\u003c/h2\u003e\n\u003cp\u003eFinding the line between utility and spam is tricky. When finding use cases for notifications, be sure to offer the users preferences for what type of notifications they want to receive and how often they want to receive them. Well designed notification experiences increase the usability of your app and keep users abreast of important changes, increasing their engagement and satisfaction.\u003c/p\u003e\n","desc":"In-browser notifications, no server required!","permalink":"https://teukka.tech/posts/2020-05-16-notifications/","section":"posts","tags":["javascript","webdev"],"title":"Javascript Quick Tip -- Browser Notifications"},{"contents":"\u003ch2 id=\"working-hard-or-hardly-working\"\u003eWorking Hard, or Hardly Working?\u003c/h2\u003e\n\u003cp\u003eThe Service Worker API is a powerful tool for providing better offline experiences, push notifications, and background syncing for web applications. Like me, you may be familiar with service workers from the role they play in creating Progressive Web Apps (PWAs), or from seeing them registered as part of the build output of \u003ccode\u003ecreate-react-app\u003c/code\u003e. While this automatic output from build tools such as \u003ccode\u003ecreate-react-app\u003c/code\u003e is very useful in getting started with PWAs, using the Service Worker API is much more beneficial to your application when tailored to your use cases. Let\u0026rsquo;s dive into the Service Worker API to see how it provides a better user experience in some common use cases, starting with caching network responses.\u003c/p\u003e\n\u003cp\u003eA great place to start for any Web API is the MDN Page. In the case of the Service Worker API, MDN offers the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\"\u003efollowing paragraph\u003c/a\u003e as an introduction:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eService workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSince service workers act as a man in the middle between the browser, network, and your application, their potential is huge! However, this means that the potential for abuse is also huge, and to combat this abuse, browsers have built in security measures around the Service Worker API. Some of these security measures are: service workers are \u003cem\u003eonly\u003c/em\u003e registered over HTTPS or from your \u003ccode\u003elocalhost\u003c/code\u003e, and only registered from the same origin as the current page. Working in Firefox, you enable service workers over HTTP in your developer tools console, and inspect and debug registered service workers in \u003ccode\u003eabout:debugging\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"cache-money\"\u003eCache Money\u003c/h2\u003e\n\u003cp\u003eContent Caching is a great starting point for utilizing service workers, and tools like \u003ccode\u003ecreate-react-app\u003c/code\u003e implement by default. Caching static assets is one of the first steps in creating a PWA. Let\u0026rsquo;s dive into caching by looking at the code for caching this blog for offline use! If you open up your devloper tools on the \u003ca href=\"https://teukka.tech\"\u003ehomepage\u003c/a\u003e of this blog, you\u0026rsquo;ll find an \u003ccode\u003eindex.js\u003c/code\u003e file that has this content:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e registerSW() {\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (location.hostname === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;localhost\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e;\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;serviceWorker\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ein\u003c/span\u003e navigator) {\n    navigator.serviceWorker.register(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;/sw-prod.js\u0026#34;\u003c/span\u003e).\u003cspan style=\"color:#f00\"\u003ecatch\u003c/span\u003e((e) =\u0026gt; {\n      console.log(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Registration fail: \u0026#34;\u003c/span\u003e, e);\n    });\n  }\n}\n\nregisterSW();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is the code for registering the service worker for this site. On its own, it\u0026rsquo;s not very compelling or informative, to really understand what\u0026rsquo;s going on under the hood, we need to take a look at the \u003ccode\u003esw-prod.js\u003c/code\u003e file. Inspect this file by opening Firefox\u0026rsquo;s \u003ccode\u003eabout:debugging\u003c/code\u003e in a new tab, selecting the service worker for this domain, and clicking \u003ccode\u003einspect\u003c/code\u003e (or if it\u0026rsquo;s not running, clicking \u003ccode\u003erun\u003c/code\u003e, and then \u003ccode\u003einspect\u003c/code\u003e).\u003c/p\u003e\n\u003ch3 id=\"what-to-cache\"\u003eWhat to cache\u003c/h3\u003e\n\u003cp\u003eNow that you have the service worker code let\u0026rsquo;s break it down:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e CACHE_NAME = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;posts-{someUUID}\u0026#34;\u003c/span\u003e;\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e PAGES = [\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./ico.png\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./pandocoverride.css\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./style.css\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./space.png\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./reset.css\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./blog.css\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./index.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./vimloop.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./luanvim.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./vimtip-gitlens.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./frameworkpt2.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./frameworkpt1.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./frameworkintro.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./vimcandothat.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./datastructures.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./viiksetjs.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./proxies.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./rxjs-recompose.html\u0026#34;\u003c/span\u003e,\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./blogheader.js\u0026#34;\u003c/span\u003e,\n];\n\n\u003cspan style=\"color:#0f0\"\u003e// install pages\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003eself.addEventListener(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;install\u0026#34;\u003c/span\u003e, installWorker);\n\n\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e installWorker(e) {\n  \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e self.skipWaiting();\n}\n\u003cspan style=\"color:#0f0\"\u003e// ...continues below\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"service-worker-life-cycle\"\u003eService Worker life cycle\u003c/h3\u003e\n\u003cp\u003eThis snippet handles the installation event, as well assigning a value for the cache name and the pages to be initially cached. The interesting part of this code is the function that gets called on the \u003ccode\u003einstall\u003c/code\u003e event. Installation is the first event in the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerState\"\u003eservice worker lifecycle\u003c/a\u003e, it gets kicked off by the \u003ccode\u003eregister\u003c/code\u003e function in \u003ccode\u003eindex.js\u003c/code\u003e. In our \u003ccode\u003einstallWorker\u003c/code\u003e function, we call the \u003ccode\u003eskipWaiting\u003c/code\u003e method on the service worker, which causes the waiting service worker (in this case the one we are trying to install) to become the active service worker. Let\u0026rsquo;s move on to the next section:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003eself.addEventListener(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;activate\u0026#34;\u003c/span\u003e, activateServiceWorker);\n\n\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e activateServiceWorker(event) {\n  \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e deleteOldCaches();\n  \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e installCachedFiles();\n  event.waitUntil(clients.claim()); \u003cspan style=\"color:#0f0\"\u003e// make the current sw the active sw in all cached pages\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e}\n\n\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e installCachedFiles() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e cache = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e caches.open(CACHE_NAME);\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e cache.addAll(PAGES);\n}\n\n\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e deleteOldCaches() {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e keys = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e caches.keys();\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e oldVersions = keys.filter((name) =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#87ceeb\"\u003e/^posts-(\\w{8}(-\\w{4}){3}-\\w{12}?)/\u003c/span\u003e.test(name)) {\n      \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003etrue\u003c/span\u003e;\n    } \u003cspan style=\"color:#f00\"\u003eelse\u003c/span\u003e {\n      \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e;\n    }\n  });\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e Promise.all(oldVersions.map((key) =\u0026gt; caches.\u003cspan style=\"color:#f00\"\u003edelete\u003c/span\u003e(key)));\n}\n\u003cspan style=\"color:#0f0\"\u003e// ...continues below\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter the service worker is installed, it activates, calling the \u003ccode\u003eactivateServiceWorker\u003c/code\u003e function we registered on the \u003ccode\u003eactivate\u003c/code\u003e event. When our service worker is activated, we want to delete the old cache and install the current version of the files denoted in the \u003ccode\u003ePAGES\u003c/code\u003e array in the new cache. The function, \u003ccode\u003edeleteOldCaches\u003c/code\u003e gets all of the cache keys (which are the old versions of \u003ccode\u003eCACHE_NAME\u003c/code\u003e), and checks them to see if they match the format we\u0026rsquo;ve given to our \u003ccode\u003eCACHE_NAME\u003c/code\u003e. We don\u0026rsquo;t simply clear \u003cem\u003eall\u003c/em\u003e the keys in the cache because we may have several service workers running at a time, and clearing their data may have unintended consequences, so this service worker only removes data that it has placed in the cache itself.\u003c/p\u003e\n\u003cp\u003eInstalling the new versions of the blog posts requires opening a cache with the key of \u003ccode\u003eCACHE_NAME\u003c/code\u003e, and using the \u003ccode\u003eaddAll\u003c/code\u003e method to specify that we want to add everything in the \u003ccode\u003ePAGES\u003c/code\u003e array to be added. After deleting old versions of the cache and installing the latest posts, the \u003ccode\u003eclients.claim()\u003c/code\u003e call allows the current service worker to become the active service worker on all pages in its scope. Wrapping \u003ccode\u003eclients.claim()\u003c/code\u003e inside of \u003ccode\u003eevent.waitUntil()\u003c/code\u003e is an important step because it prevents the browser from interrupting the claim process which could lead to the service worker becoming active on some pages but not on others within its scope. Let\u0026rsquo;s break down the final section:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003eself.addEventListener(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;fetch\u0026#34;\u003c/span\u003e, (event) =\u0026gt; {\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (\n    event.request.mode === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;navigate\u0026#34;\u003c/span\u003e ||\n    event.request.destination === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;style\u0026#34;\u003c/span\u003e ||\n    event.request.destination === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;script\u0026#34;\u003c/span\u003e ||\n    event.request.destination === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;image\u0026#34;\u003c/span\u003e\n  ) {\n    event.respondWith(cacheResponse(event.request, event));\n  }\n});\n\n\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e cacheResponse(request, event) {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e cache = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e caches.open(CACHE_NAME);\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e match = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e cache.match(request.url);\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (match) {\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e match;\n  }\n  \u003cspan style=\"color:#0f0\"\u003e// Create promises for both the network response,\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#0f0\"\u003e// and a copy of the response that can be used in the cache.\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e fetchResponseP = fetch(request);\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e fetchResponseCloneP = fetchResponseP.then((r) =\u0026gt; r.clone());\n\n  event.waitUntil(\n    (\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e () {\n      \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e cache.put(request, \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e fetchResponseCloneP);\n    })()\n  );\n\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e fetchResponseP;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"going-to-the-network\"\u003eGoing to the network\u003c/h3\u003e\n\u003cp\u003eIn this segment of the service worker code, we are adding an event listener for \u003ccode\u003efetch\u003c/code\u003e events and responding with a cached response under certain conditions. The conditions we are checking before responding with cached response are: if the request is a navigation event (loading this blog post in your browser for example), or if the browser requests additional resources like CSS, Javascript, or images. To illustrate this flow, we\u0026rsquo;ll take a look at two different resources requested by this website, \u003ccode\u003evimtip-gitlens.html\u003c/code\u003e and \u003ccode\u003ebb8_1.svg\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSince \u003ccode\u003evimtip-gitlens.html\u003c/code\u003e is specified in the \u003ccode\u003ePAGES\u003c/code\u003e array we cached on service worker activation, we\u0026rsquo;ll look at it first. When you navigate to \u003ca href=\"https://teukka.tech/vimtip-gitlens.html\"\u003ethe post\u003c/a\u003e, the \u003ccode\u003eevent.respondWith\u003c/code\u003e function is executed with the value from \u003ccode\u003ecacheResponse\u003c/code\u003e being evaluated. Using \u003ccode\u003eevent.respondWith\u003c/code\u003e tells the service worker to intercept the request and respond with the argument passed to this function. Let\u0026rsquo;s step through the \u003ccode\u003ecacheResponse\u003c/code\u003e function: we first open the current cache (as denoted with the \u003ccode\u003eCACHE_NAME\u003c/code\u003e) and check to see if there are any entries for the URL of the incoming request. If we\u0026rsquo;ve cached this URL before, we return the cached response\u0026ndash;avoiding a network call. If the service worker can\u0026rsquo;t find the URL from its cache, then makes a network request and places the response into the cache while returning the \u003cem\u003ePromise\u003c/em\u003e containing the response back to our main application. Putting the response in the cache is wrapped inside \u003ccode\u003eevent.waitUntil\u003c/code\u003e to ensure that the browser does not interrupt the service worker while updating.\u003c/p\u003e\n\u003ch3 id=\"wrapping-up\"\u003eWrapping up\u003c/h3\u003e\n\u003cp\u003eThe final step in this example is making sure that the service worker always reflects the most up to date content. This means that every time we make a change to one of our cached assets, we update the \u003ccode\u003eCACHE_NAME\u003c/code\u003e in the service worker. For this blog, I created a bash script that helps ensure I don\u0026rsquo;t forget to update my service worker cache:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#e5e5e5\"\u003e#!/bin/bash\n\u003c/span\u003e\u003cspan style=\"color:#e5e5e5\"\u003e\u003c/span\u003e\n\u003cspan style=\"color:#eedd82\"\u003eUUID\u003c/span\u003e=\u003cspan style=\"color:#f00\"\u003e$(\u003c/span\u003ecat /proc/sys/kernel/random/uuid\u003cspan style=\"color:#f00\"\u003e)\u003c/span\u003e\nrm -f sw-prod.js\ncp sw.js sw-prod.js\nsed -i \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;s/%VERSION%/\u003c/span\u003e\u003cspan style=\"color:#eedd82\"\u003e$UUID\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e/g\u0026#34;\u003c/span\u003e sw-prod.js\necho \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Built version: \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003e\u003cspan style=\"color:#eedd82\"\u003eUUID\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI use the \u003ccode\u003euuid\u003c/code\u003e functionality built into Linux to generate a unique name for my cache, then I copy my service worker code with a placeholder for \u003ccode\u003eCACHE_NAME\u003c/code\u003e to the \u003ccode\u003esw-prod.js\u003c/code\u003e file. The final step is to replace my placeholder cache name with the unique identifier I generated.\u003c/p\u003e\n\u003cp\u003eCaching static files is a great way to start using the Service Worker API, and offers your users a better offline experience. Stay tuned for more service worker tips!\u003c/p\u003e\n","desc":"Make a better web experience with service workers.","permalink":"https://teukka.tech/posts/2020-03-07-serviceworker/","section":"posts","tags":["javascript","service worker","webdev"],"title":"Build a Better Web with Service Workers"},{"contents":"\u003ch2 id=\"proxies\"\u003eProxies\u003c/h2\u003e\n\u003cp\u003eJavascript Proxies are a powerful concept in ES6. They give developers more control over JS objects, paving the way for declarative API design. I am going to show some examples of how use proxies to extend the functionality of traditional Javascript objects and why they are useful in understanding the flow of data inside your programs.\u003c/p\u003e\n\u003ch2 id=\"microservice-client\"\u003eMicroservice Client\u003c/h2\u003e\n\u003cp\u003eThe first example comes from a request management client that uses a JSON schema to validate incoming requests and route them to other services. The code for its implementation is \u003ca href=\"https://github.com/jamestthompson3/micro-manager\"\u003ehere\u003c/a\u003e. Proxies are valuable in this context since our request client\u0026rsquo;s API reflects our schema, thus allowing the schema to serve as both validation and documentation. Another advantage to schema driven API definitions is that automated tools are able to generate and update the schemas based on microservice API docs, minimizing the work needed to stay in sync with other services to which we are making requests.\u003c/p\u003e\n\u003ch3 id=\"designing-the-api\"\u003eDesigning The API\u003c/h3\u003e\n\u003cp\u003eSince this a client for managing requests to different microservices, we want the API to reflect the supported HTTP methods and service name of each URL. A call to a posts service looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e mySchema = {\n  posts: {\n    methods: [\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;get\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;post\u0026#34;\u003c/span\u003e],\n    path: template(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e),\n    bodyValidator: {\n      id: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;updateProduct\u0026#34;\u003c/span\u003e,\n      type: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e,\n      properties: {\n        title: { type: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e },\n        author: { type: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e },\n        content: { type: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e },\n      },\n    },\n    paramsValidator: {\n      id: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;sortBy\u0026#34;\u003c/span\u003e,\n      type: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e,\n      properties: {\n        id: { type: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e },\n      },\n    },\n  },\n};\n\u003cspan style=\"color:#0f0\"\u003e// The Manager class shown in the next example, request adaptors are not covered in this post\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e// but more information can be found in the repo link above.\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e postsClient = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Manager(\n  \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;http://posts.some-service.net\u0026#34;\u003c/span\u003e,\n  axiosAdapter\n).validateWith(mySchema);\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e getRequest = myclient.posts().get({ sortBy: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;newest\u0026#34;\u003c/span\u003e });\n\ngetRequest.then((res) =\u0026gt; res.json()).then(console.log);\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e postRequest = myclient.posts().post({\n  title: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;why proxies are cool\u0026#34;\u003c/span\u003e,\n  author: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;taylor thompson\u0026#34;\u003c/span\u003e,\n  content: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;proxies are cool because they give you superpowers.\u0026#34;\u003c/span\u003e,\n});\n\npostRequest.then((res) =\u0026gt; res.json()).then(console.log);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe question then becomes, \u0026ldquo;how does our request client reflect the schema without manually typing out all the fields?\u0026rdquo;. This is where proxies come in to play. Let\u0026rsquo;s look at a stripped down implementation of the \u003ccode\u003eManager\u003c/code\u003e class:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003eclass\u003c/span\u003e Manager {\n  constructor(baseURL, adaptor) {\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.baseURL = baseURL;\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.adaptor = adaptor;\n  }\n  validateWith(schema) {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e self = \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e; \u003cspan style=\"color:#0f0\"\u003e// Added to prevent confusion with \u0026#39;this\u0026#39; when nesting calls\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e accessInterceptor(\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e (_, schemaPath) {\n      \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (!(schemaPath \u003cspan style=\"color:#f00\"\u003ein\u003c/span\u003e schema)) {\n        \u003cspan style=\"color:#0f0\"\u003e// custom defined error\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e        \u003cspan style=\"color:#f00\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e PathNotInSchemaError(\n          \u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eschemaPath\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e not in schema.\\n valid paths are\\n [\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eObject.keys(\n            schema\n          )\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e]`\u003c/span\u003e\n        );\n      }\n      \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e (specifier) =\u0026gt;\n        accessInterceptor(\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e (_, method) {\n          \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e supportedMethods = schema[schemaPath].methods;\n          \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (!supportedMethods.includes(method)) {\n            \u003cspan style=\"color:#f00\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e MethodNotSupportedError(\n              \u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003emethod\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e not supported in \u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eschemaPath\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e.\\n supported methods are \\n [\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eObject.values(\n                supportedMethods\n              )\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e]`\u003c/span\u003e\n            );\n          }\n        });\n      \u003cspan style=\"color:#0f0\"\u003e// continued below\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#0f0\"\u003e// ...\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e    });\n  }\n}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e accessInterceptor(interceptor) {\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Proxy(\n    {},\n    {\n      get(target, property) {\n        \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e interceptor(target, property);\n      },\n    }\n  );\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMuch of the heavy lifting in the \u003ccode\u003eManager\u003c/code\u003e class is performed by the \u003ccode\u003eaccessInterceptor\u003c/code\u003e function. It takes a function as an argument and returns a proxy. The interceptor function is called by the proxy whenever we try to access a property of the target object (which in this case is just an empty object). Using the interceptors on property access allows the object to dynamically take whatever shape we want, which in snippet above, is \u003ccode\u003emanagerClassInstance.schemaPath.httpMethod\u003c/code\u003e. Because the first interceptor function checks whether or not the property attempting to be accessed is defined in the provided schema, if we were to try and access a non-existent property on the example schema like \u003ccode\u003eusers\u003c/code\u003e, the \u003ccode\u003eManager\u003c/code\u003e class instance throws a \u003ccode\u003ePathNotInSchemaError\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eBy using the \u003ccode\u003eaccessInterceptor\u003c/code\u003e function, we are able to chain methods according to our schema. If our schema changes, the methods available on the \u003ccode\u003eManager\u003c/code\u003e class instance also change. This enforces parity between our code and our documentation (in this case the schemas are self documenting).\u003c/p\u003e\n\u003ch2 id=\"object-access-interception\"\u003eObject Access Interception\u003c/h2\u003e\n\u003cp\u003eBeing able to introspect the activity of your data structures is useful. For example, if you want to trace all the \u003ccode\u003eget\u003c/code\u003e and \u003ccode\u003eset\u003c/code\u003e operations on an object, proxies are here to help:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e dataStore = {\n  users: [\n    { username: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;user123\u0026#34;\u003c/span\u003e, id: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;3a34cb03s\u0026#34;\u003c/span\u003e },\n    { username: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;tester456\u0026#34;\u003c/span\u003e, id: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;6kj77acv9\u0026#34;\u003c/span\u003e },\n  ],\n  posts: [{ title: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;some cool post\u0026#34;\u003c/span\u003e, desc: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;a great post about javascript\u0026#34;\u003c/span\u003e }],\n  \u003cspan style=\"color:#0f0\"\u003e//....\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e};\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e handler = {\n  get(...args) {\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;%cGETTING WITH: %o\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;color: purple;\u0026#34;\u003c/span\u003e, ...args);\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e Reflect.get(...args);\n  },\n  set(...args) {\n    console.log(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;%cSETTING WITH: %o\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;color: blue;\u0026#34;\u003c/span\u003e, ...args);\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e Reflect.set(...args);\n  },\n};\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e dataStoreWithTracingEnabled = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Proxy(dataStore, handler);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this example, when you assign or access property values to the \u003ccode\u003edataStoreWithTracingEnabled\u003c/code\u003e variable, you see the target, property, value, and receiver in the console. If you set the new property \u003ccode\u003eonlineStatus\u003c/code\u003e by \u003ccode\u003edataStoreWithTracingEnabled.onlineStatus = 'busy'\u003c/code\u003e, you see the following in your console:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-txt\" data-lang=\"txt\"\u003e - Our message:\n SETTING WITH:\n\n - the target (the datastore object):\n{\n users: [{username: \u0026#39;user123\u0026#39;, id: \u0026#39;3a34cb03s\u0026#39;}, {username: \u0026#39;tester456\u0026#39;, id: \u0026#39;6kj77acv9\u0026#39;}],\n posts: [{title: \u0026#39;some cool post\u0026#39;, desc: \u0026#39;a great post about javascript\u0026#39;}],\n onlineStatus: \u0026#39;busy\u0026#39;\n}\n\n- the property:\n onlineStatus\n\n- the value:\n \u0026#39;busy\u0026#39;\n\n- receiver:\n\nProxy\n \u0026lt;target\u0026gt;: Object {\n   users: [{username: \u0026#39;user123\u0026#39;, id: \u0026#39;3a34cb03s\u0026#39;}, {username: \u0026#39;tester456\u0026#39;, id: \u0026#39;6kj77acv9\u0026#39;}],\n   posts: [{title: \u0026#39;some cool post\u0026#39;, desc: \u0026#39;a great post about javascript\u0026#39;}],\n   onlineStatus: \u0026#39;busy\u0026#39;\n },\n \u0026lt;handler\u0026gt;: Object {\n   get: get(args),\n   set: set(args)\n }\n\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIntercepting Object properties is not only useful for introspection, but also for creating user friendly abstractions. Some interesting libraries that use proxies are: \u003ca href=\"https://github.com/immerjs/immer\"\u003eimmer\u003c/a\u003e, uses proxies to produce immutable datastructures from an API that follows Javascript\u0026rsquo;s mutable Object methods, \u003ca href=\"https://github.com/sdgluck/objecthistory\"\u003eobjecthistory\u003c/a\u003e which enables undo and redo for values assigned to objects, and \u003ca href=\"https://github.com/mrjacobbloom/echo\"\u003eecho\u003c/a\u003e, which uses proxies similarly to the above example, logging the evaluation of the code you type in the console. Some ideas where to use proxies in your current codebase: sending telemetry, better request logging, input sanitization, validating requests, and broadcasting state changes (a lightweight alternative to observables).\u003c/p\u003e\n\u003ch2 id=\"additional-resources\"\u003eAdditional Resources\u003c/h2\u003e\n\u003cp\u003eFor more information on how proxies work, \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\"\u003emdn\u003c/a\u003e as always is a great reference, as well as the section \u003ca href=\"https://exploringjs.com/es6/ch_proxies.html\"\u003emeta programming with proxies\u003c/a\u003e from Dr. Axel Rauschmayer\u0026rsquo;s excellent book, Exploring ES6.\u003c/p\u003e\n","desc":"Using JS proxies to create more declaritive APIs.","permalink":"https://teukka.tech/posts/2020-02-01-proxies/","section":"posts","tags":["javascript","webdev","es6"],"title":"A Brief Look at Javascript Proxies"},{"contents":"\u003ch2 id=\"intro\"\u003eIntro\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens\"\u003eGitLens\u003c/a\u003e is a VSCode plugin that, among other things, allows you to see the time, commit author, and commit message of the current line. With a little help from to the neovim api and our shell, it we can recreate this functionality in a few lines of lua code.\u003c/p\u003e\n\u003ch2 id=\"the-code\"\u003eThe Code\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in utils.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003eblameVirtText\u003c/span\u003e()\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e ft = vim.fn.expand(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%:h:t\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- get the current file extension\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e ft == \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#0f0\"\u003e-- if we are in a scratch buffer or unknown filetype\u003c/span\u003e\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e ft == \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;bin\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#0f0\"\u003e-- if we are in nvim\u0026#39;s terminal window\u003c/span\u003e\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  api.nvim_buf_clear_namespace(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, -\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- clear out virtual text from namespace 2 (the namespace we will set later)\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e currFile = vim.fn.expand(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%\u0026#39;\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e line = api.nvim_win_get_cursor(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e blame = vim.fn.system(string.format(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;git blame -c -L %d,%d %s\u0026#39;\u003c/span\u003e, line[\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e], line[\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e], currFile))\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e hash = vim.split(blame, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%s\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e]\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e cmd = string.format(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;git show %s \u0026#34;\u003c/span\u003e, hash)..\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;--format=\u0026#39;%an | %ar | %s\u0026#39;\u0026#34;\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e hash == \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;00000000\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    text = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;Not Committed Yet\u0026#39;\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eelse\u003c/span\u003e\n    text = vim.fn.system(cmd)\n    text = vim.split(text, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e\\n\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e]\n    \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e text:gmatch(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;fatal\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e \u003cspan style=\"color:#0f0\"\u003e-- if the call to git show fails\u003c/span\u003e\n      text = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;Not Committed Yet\u0026#39;\u003c/span\u003e\n    \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  api.nvim_buf_set_virtual_text(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e2\u003c/span\u003e, line[\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e] - \u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e, {{ text,\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;GitLens\u0026#39;\u003c/span\u003e }}, {}) \u003cspan style=\"color:#0f0\"\u003e-- set virtual text for namespace 2 with the content from git and assign it to the higlight group \u0026#39;GitLens\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003eclearBlameVirtText\u003c/span\u003e() \u003cspan style=\"color:#0f0\"\u003e-- important for clearing out the text when our cursor moves\u003c/span\u003e\n  api.nvim_buf_clear_namespace(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e2\u003c/span\u003e, \u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, -\u003cspan style=\"color:#f60\"\u003e1\u003c/span\u003e)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in init.vim\u003c/span\u003e\nlua vim.api.nvim_command [[autocmd CursorHold   * lua require\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;utils\u0026#39;\u003c/span\u003e.blameVirtText()]]\nlua vim.api.nvim_command [[autocmd CursorMoved  * lua require\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;utils\u0026#39;\u003c/span\u003e.clearBlameVirtText()]]\nlua vim.api.nvim_command [[autocmd CursorMovedI * lua require\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;utils\u0026#39;\u003c/span\u003e.clearBlameVirtText()]]\n\nhi! link GitLens Comment\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","desc":"Replicate the basic functionality VSCode's GitLens in 26 lines of lua","permalink":"https://teukka.tech/posts/2020-01-28-vimtip-gitlens/","section":"posts","tags":["neovim","lua","productivity"],"title":"Neovim Tip, GitLens"},{"contents":"\u003ch2 id=\"off-the-main-loop-async-actions-within-neovim\"\u003eOff The Main Loop: Async Actions within Neovim\u003c/h2\u003e\n\u003cp\u003eNeovim embeds the libuv library in the editor and exposes lua (and to some extent vimscript through the \u003ccode\u003ejobstart\u003c/code\u003e function) bindings for interacting with the library\u0026rsquo;s API. This allows actions in the editor to happen asynchronously, keeping the main editor loop clear for user input. What this means practically for users is that actions which take a long time such as grepping through large projects, generating ctags, or linting can now be done in the background without blocking the user\u0026rsquo;s ability to keep editing text.\u003c/p\u003e\n\u003cp\u003eLet\u0026rsquo;s explore how to use the libuv lua bindings in Neovim to create useful asynchronous actions. I will cover two examples: using the \u003ca href=\"https://pandoc.org\"\u003epandoc\u003c/a\u003e program to convert a markdown file to html, and using \u003ca href=\"https://github.com/BurntSushi/ripgrep\"\u003eripgrep\u003c/a\u003e to search within a project. Both of these examples use the libuv bindings differently, but still illustrate well the capabilities of libuv inside Neovim.\u003c/p\u003e\n\u003ch2 id=\"first-example-convert-markdown-files-with-pandoc\"\u003eFirst Example: Convert Markdown Files with Pandoc\u003c/h2\u003e\n\u003cp\u003ePandoc is a powerful tool for converting files into and different formats. I write many Markdown documents and it is useful to convert them into HTML for my blog. In order to do this in an asynchronous way, we will use \u003ccode\u003evim.loop\u003c/code\u003e from Neovim\u0026rsquo;s lua library. I would recommend going through the documentation on \u003ccode\u003evim.loop\u003c/code\u003e as you code along with this post. Let\u0026rsquo;s start by creating a basic lua function outline in our \u003ccode\u003epackagepath\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in ~/.config/nvim/lua/markdown.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e loop = vim.loop\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003econvertFile\u003c/span\u003e()\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e shortname = vim.fn.expand(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%:t:r\u0026#39;\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e fullname = api.nvim_buf_get_name(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e)\n \u003cspan style=\"color:#0f0\"\u003e-- loop logic goes here\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn this snippet, we first get the shortened name of the file (i.e. \u003ccode\u003evimlooppost\u003c/code\u003e in \u003ccode\u003evimlooppost.md\u003c/code\u003e), and the full name of the file (i.e. \u003ccode\u003e~/blog/posts/vimlooppost.md\u003c/code\u003e). We will use both of these variables later when we spawn the pandoc process. In order to get a better understanding of what \u003ccode\u003evim.loop.spawn\u003c/code\u003e does, let\u0026rsquo;s head over to the \u003ca href=\"https://github.com/luvit/luv/blob/master/docs.md#uvspawnfile-options-onexit\"\u003elibuv documentation\u003c/a\u003e. Here we can see that it takes an options table, an \u003ccode\u003eonexit\u003c/code\u003e callback, and returns the processId and the handle of the spawned process. Using this information, let\u0026rsquo;s build out the rest of the \u003ccode\u003econvertFile\u003c/code\u003e function:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\n\u003cspan style=\"color:#0f0\"\u003e-- in ~/.config/nvim/lua/markdown.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e loop = vim.loop\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003econvertFile\u003c/span\u003e()\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e shortname = vim.fn.expand(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%:t:r\u0026#39;\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e fullname = api.nvim_buf_get_name(\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e)\n  handle = vim.loop.spawn(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;pandoc\u0026#39;\u003c/span\u003e, {\n    args = {fullname, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--to=html5\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-o\u0026#39;\u003c/span\u003e, string.format(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;%s.html\u0026#39;\u003c/span\u003e, shortname), \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-s\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--highlight-style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;tango\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;-c\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--css=pandoc.css\u0026#39;\u003c/span\u003e}\n  },\n  \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e()\n    print(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;DOCUMENT CONVERSION COMPLETE\u0026#39;\u003c/span\u003e)\n    handle:close()\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  )\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePandoc receives as arguments the strings listed in the \u003ccode\u003eargs\u003c/code\u003e table, and when the process finishes, we echo a success message and close the handle. Using this in our vimrc is as simple as:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in ftplug/markdown.vim\u003c/span\u003e\n\nnnoremap \u0026lt;leader\u0026gt;c :lua require\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;markdown\u0026#39;\u003c/span\u003e.convertFile()\u0026lt;CR\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"second-example-async-grep\"\u003eSecond Example: Async Grep\u003c/h2\u003e\n\u003cp\u003eMuch like in the first example, we will be relying on an external program to do the heavy lifting, ripgrep. Unlike in the first example, we don\u0026rsquo;t only want to kick off a background process, but also use the values generated in this process inside of Neovim. For that, we will need to pass a set of file descriptors to \u003ccode\u003evim.loop.spawn\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in ~/.config/nvim/lua/tools.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e loop = vim.loop\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003easyncGrep\u003c/span\u003e(term)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stdout = loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- create file descriptor for stdout\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stderr = loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- create file descriptor for stdout\u003c/span\u003e\n  handle = loop.spawn(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;rg\u0026#39;\u003c/span\u003e, {\n    args = {term, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--vimgrep\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--smart-case\u0026#39;\u003c/span\u003e},\n    stdio = {\u003cspan style=\"color:#f00\"\u003enil\u003c/span\u003e,stdout,stderr}\n  },\n  \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e()\n    stdout:read_stop()\n    stderr:read_stop()\n    stdout:close()\n    stderr:close()\n    handle:close()\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  )\n  loop.read_start(stdout, onread) \u003cspan style=\"color:#0f0\"\u003e-- TODO implement onread handler\u003c/span\u003e\n  loop.read_start(stderr, onread)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur function, \u003ccode\u003easyncGrep\u003c/code\u003e will take a search term as an argument which it then passes to \u003ccode\u003eripgrep\u003c/code\u003e in the \u003ccode\u003eloop.spawn\u003c/code\u003e call. After the process is spawned, we need to start reading the output into our file descriptors, which will then call the \u003ccode\u003eonread\u003c/code\u003e callback which we have yet to implement. Let\u0026rsquo;s implement the \u003ccode\u003eonread\u003c/code\u003e callback now:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in tools.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e results = {}\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003eonread\u003c/span\u003e(err, data)\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e err \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    \u003cspan style=\"color:#0f0\"\u003e-- print(\u0026#39;ERROR: \u0026#39;, err)\u003c/span\u003e\n    \u003cspan style=\"color:#0f0\"\u003e-- TODO handle err\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e data \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    table.insert(results, data)\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe \u003ccode\u003eonread\u003c/code\u003e callback takes data written to our file descriptor by the \u003ccode\u003eripgrep\u003c/code\u003e process and appends a table called \u003ccode\u003eresults\u003c/code\u003e. We now want to add functionality to our \u003ccode\u003easyncGrep\u003c/code\u003e function that will allow us to use these results to set the quickfix list:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003easyncGrep\u003c/span\u003e(term)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stdout = loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- create file descriptor for stdout\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stderr = loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- create file descriptor for stdout\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003esetQF\u003c/span\u003e()\n    vim.fn.setqflist({}, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, {title = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;Search Results\u0026#39;\u003c/span\u003e, lines = results})\n    api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;cwindow\u0026#39;\u003c/span\u003e)\n    \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e count = #results\n    \u003cspan style=\"color:#f00\"\u003efor\u003c/span\u003e i=\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, count \u003cspan style=\"color:#f00\"\u003edo\u003c/span\u003e results[i]=\u003cspan style=\"color:#f00\"\u003enil\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e \u003cspan style=\"color:#0f0\"\u003e-- clear the table for next search\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  handle = loop.spawn(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;rg\u0026#39;\u003c/span\u003e, {\n    args = {term, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--vimgrep\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--smart-case\u0026#39;\u003c/span\u003e},\n    stdio = {\u003cspan style=\"color:#f00\"\u003enil\u003c/span\u003e,stdout,stderr}\n  },\n  \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e()\n    stdout:read_stop()\n    stderr:read_stop()\n    stdout:close()\n    stderr:close()\n    handle:close()\n    setQF()\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  )\n  loop.read_start(stdout, onread) \u003cspan style=\"color:#0f0\"\u003e-- TODO implement onread handler\u003c/span\u003e\n  loop.read_start(stderr, onread)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you run this function, you will encounter this error message: \u003ccode\u003elua/tools.lua:122: E5560: vimL function must not be called in a lua loop callback\u003c/code\u003e. In order for any vim functions to be called within a lua loop callback, they need to be wrapped in \u003ccode\u003evim.schedule_wrap\u003c/code\u003e. Wrapping vim functions in \u003ccode\u003evim.schedule_wrap\u003c/code\u003e is necessary since it schedules the callbacks to be invoked when it is safe, bridging the gap between the libuv event loop and the internal Neovim main loop. To learn more about \u003ccode\u003evim.schedule_wrap\u003c/code\u003e, check out \u003ccode\u003e:h schedule_wrap\u003c/code\u003e. Let\u0026rsquo;s fix this error and see what our function looks like when it\u0026rsquo;s all put together:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in ~/.config/nvim/lua/tools.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e loop = vim.loop\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e results = {}\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003eonread\u003c/span\u003e(err, data)\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e err \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    \u003cspan style=\"color:#0f0\"\u003e-- print(\u0026#39;ERROR: \u0026#39;, err)\u003c/span\u003e\n    \u003cspan style=\"color:#0f0\"\u003e-- TODO handle err\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e data \u003cspan style=\"color:#f00\"\u003ethen\u003c/span\u003e\n    table.insert(results, data)\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003easyncGrep\u003c/span\u003e(term)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stdout = vim.loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e stderr = vim.loop.new_pipe(\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003esetQF\u003c/span\u003e()\n    vim.fn.setqflist({}, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;r\u0026#39;\u003c/span\u003e, {title = \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;Search Results\u0026#39;\u003c/span\u003e, lines = results})\n    api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;cwindow\u0026#39;\u003c/span\u003e)\n    \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e count = #results\n    \u003cspan style=\"color:#f00\"\u003efor\u003c/span\u003e i=\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e, count \u003cspan style=\"color:#f00\"\u003edo\u003c/span\u003e results[i]=\u003cspan style=\"color:#f00\"\u003enil\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e \u003cspan style=\"color:#0f0\"\u003e-- clear the table for the next search\u003c/span\u003e\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  handle = vim.loop.spawn(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;rg\u0026#39;\u003c/span\u003e, {\n    args = {term, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--vimgrep\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;--smart-case\u0026#39;\u003c/span\u003e},\n    stdio = {\u003cspan style=\"color:#f00\"\u003enil\u003c/span\u003e,stdout,stderr}\n  },\n  vim.schedule_wrap(\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e()\n    stdout:read_stop()\n    stderr:read_stop()\n    stdout:close()\n    stderr:close()\n    handle:close()\n    setQF()\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n  )\n  )\n  vim.loop.read_start(stdout, onread)\n  vim.loop.read_start(stderr, onread)\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s use this newly created async function in our vimrc:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-vim\" data-lang=\"vim\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in init.vim\u003c/span\u003e\ncommand! -nargs=+ -complete=dir -bar Grep lua require\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;tools\u0026#39;\u003c/span\u003e.asyncGrep(\u0026lt;q-args\u0026gt;)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we can call \u003ccode\u003e:Grep searchTerm\u003c/code\u003e and get results without blocking the main editor loop!\u003c/p\u003e\n\u003ch2 id=\"whats-next\"\u003eWhat\u0026rsquo;s Next?\u003c/h2\u003e\n\u003cp\u003eHaving libuv bindings in Neovim unlocks a lot of potential for extending the functionality of your editor. The ability to asynchronously spawn other process can be used for linting, file watching, formatting, and much more. Free yourself from main loop blockage and try experimenting with \u003ccode\u003evim.loop\u003c/code\u003e.\u003c/p\u003e\n","desc":"Learn how to use LibUV to create async vim actions","permalink":"https://teukka.tech/posts/2020-01-07-vimloop/","section":"posts","tags":["lua","neovim","libuv"],"title":"Using LibUV in Neovim"},{"contents":"\u003ch2 id=\"why-lua\"\u003eWhy Lua?\u003c/h2\u003e\n\u003cp\u003eNeovim has an embedded lua 5.1 runtime which is used to create faster and more powerful extensions of your favorite editor. In the \u003ca href=\"https://neovim.io/charter/\"\u003eNeovim charter\u003c/a\u003e, it lists one of its goals as developing a first-class lua scripting alternative to VimL. One of the reasons for doing this is that VimL is a slow interpreted language with almost no optimizations. Much of the time spent in vim startup and in actions from plugins that can block the main loop in the editor is in parsing and executing vimscript. A great explanation of this can be found in Neovim lead maintainer, Justin M. Keyes' talk, \u003ca href=\"https://www.youtube.com/watch?v=Bt-vmPC_-Ho\"\u003eWe can have nice things\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWith the recent introduction of the built-in LSP client in the master branch written in lua, I became more interested in the possibilities lua has to offer and began trying to use lua in Neovim. I have never written lua before and have not seen very many guides on how to utilize the lua runtime in Neovim, so I want to illustrate the process of learning how to take advantage of the powerful scripting capabilities that are available in the Neovim runtime. Given that my experience is still very basic, these examples will also be quite small, but I hope that it can be a good jumping off point for those interested in using lua more in extending Neovim.\u003c/p\u003e\n\u003ch2 id=\"getting-started\"\u003eGetting Started\u003c/h2\u003e\n\u003cp\u003eOne of the first things I was confused about was how to use lua code inside of vim and vimscript. Luckily, the documentation in \u003ccode\u003e:h lua\u003c/code\u003e gives a few examples of how lua can be used in the editor. I recommend reading it for an in-depth explanation of how Neovim treats lua and the sourcing of lua files. Here\u0026rsquo;s a high-level overview of different approaches to executing lua code in your editor:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFrom the vim command line, you can run \u003ccode\u003e:lua \u0026lt;yourCodeHere\u0026gt;\u003c/code\u003e. This is useful for keybindings, commands, and other one-off execution cases.\u003c/li\u003e\n\u003cli\u003eInside of a VimL file, you can demarcate lua code with the following code fencing:\u003c/li\u003e\n\u003c/ul\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003elua \u0026lt;\u0026lt; EOF\n-- your lua code here\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\n\u003cli\u003eInside of a VimL file you can use the \u003ccode\u003elua\u003c/code\u003e keyword to execute commands similar to the first example. (i.e. \u003ccode\u003elua \u0026lt;yourCodeHere\u0026gt;\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOne important note here is that Neovim will look for lua code in the \u003ccode\u003eruntimepath\u003c/code\u003e you\u0026rsquo;ve set in your settings. Additionally, it will append your runtimepath with \u003ccode\u003e/lua/?.lua\u003c/code\u003e and \u003ccode\u003e/lua/?/init.lua\u003c/code\u003e so it is common practice to see a \u003ccode\u003e/lua\u003c/code\u003e sub-directory inside \u003ccode\u003e.nvim\u003c/code\u003e. For more detailed information about where Neovim looks for lua code, check out \u003ccode\u003e:h lua-require\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"your-first-function\"\u003eYour First Function\u003c/h2\u003e\n\u003cp\u003ePorting your \u003ccode\u003einit.vim\u003c/code\u003e to lua can be a big undertaking, so it\u0026rsquo;s best to start small. For the first example, we\u0026rsquo;ll create a function which creates a scratch buffer.\u003c/p\u003e\n\u003cp\u003eThis function will live in a file we\u0026rsquo;ll call \u003ccode\u003etools\u003c/code\u003e, so create it in the \u003ccode\u003elua\u003c/code\u003e directory in your nvim config: \u003ccode\u003e~/.config/nvim/lua/tools.lua\u003c/code\u003e. Once we\u0026rsquo;ve created the file, we\u0026rsquo;ll fill it out with some boilerplate:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in tools.lua\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003emakeScratch\u003c/span\u003e()\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eUsing the table \u003ccode\u003eM\u003c/code\u003e here allows us to keep things out of the global scope and to use only what we need when calling the function from nvim. We\u0026rsquo;ll be using the neovim API to make a scratch buffer, so let\u0026rsquo;s create a shorthand for it in our \u003ccode\u003etools.lua\u003c/code\u003e file:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in tools.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003emakeScratch\u003c/span\u003e()\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe can create a new buffer with the \u003ccode\u003eenew\u003c/code\u003e command, and the neovim API gives us a way to call nvim commands from lua:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in tools.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003emakeScratch\u003c/span\u003e()\n  api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;enew\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- equivalent to :enew\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNext, we want to set some buffer options so that our scratch buffer isn\u0026rsquo;t listed in the buffer list and doesn\u0026rsquo;t have a swapfile created for it:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in tools.lua\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e api = vim.api\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e M = {}\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e M.\u003cspan style=\"color:#ff0\"\u003emakeScratch\u003c/span\u003e()\n  api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;enew\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#0f0\"\u003e-- equivalent to :enew\u003c/span\u003e\n  vim.bo[\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e].buftype=nofile \u003cspan style=\"color:#0f0\"\u003e-- set the current buffer\u0026#39;s (buffer 0) buftype to nofile\u003c/span\u003e\n  vim.bo[\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e].bufhidden=hide\n  vim.bo[\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e].swapfile=\u003cspan style=\"color:#f00\"\u003efalse\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e M\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThat is all we need to create the scratch buffer! Now let\u0026rsquo;s use it in our \u003ccode\u003einit.vim\u003c/code\u003e:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in init.vim\u003c/span\u003e\n\ncommand! Scratch lua require\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;tools\u0026#39;\u003c/span\u003e.makeScratch()\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow a scratch buffer is created by running the command \u003ccode\u003e:Scratch\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eYou can port your \u003ccode\u003einit.vim\u003c/code\u003e to lua one function at a time, and if you get stuck, you can always use \u003ccode\u003evim.api.nvim_command\u003c/code\u003e! When looking for help, make sure to check out \u003ccode\u003e:h api\u003c/code\u003e, and \u003ccode\u003e:h lua\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"using-vlua\"\u003eUsing v:lua\u003c/h2\u003e\n\u003cp\u003eThe variable \u003ccode\u003ev:lua\u003c/code\u003e can be used to call lua functions from within vimscript. A great use case for this is accessing the LSP client\u0026rsquo;s omnifunc. If you wanted to use the LSP completion for Rust, you may have something like this in your configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in init.vim\u003c/span\u003e\nlua \u0026lt;\u0026lt; EOF\n  local nvim_lsp = require \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;nvim_lsp\u0026#39;\u003c/span\u003e\n  nvim_lsp.rust_analyzer.setup({})\nEOF\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in ftplugin/rust.vim\u003c/span\u003e\n\nset omnifunc=v:lua.vim.lsp.omnifunc\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"interop-with-vimfn\"\u003eInterop With vim.fn\u003c/h2\u003e\n\u003cp\u003eIt is useful to have access to vimscript functions from inside of lua, especially when interacting with autoloaded functions or functions provided by plugins. In this example, we will have an autocmd that will execute the vimscript function, \u003ccode\u003etools#loadCscope\u003c/code\u003e when the \u003ccode\u003eVimEnter\u003c/code\u003e event happens.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; in autoload/tools.vim\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e! tools#loadCscope() abort\n  try\n    silent cscope add cscope.out\n  catch \u003cspan style=\"color:#87ceeb\"\u003e/^Vim\\%((\\a\\+)\\)\\=:E/\u003c/span\u003e\n  endtry\n\u003cspan style=\"color:#f00\"\u003eendfunction\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-lua\" data-lang=\"lua\"\u003e\u003cspan style=\"color:#0f0\"\u003e-- in file that you source, such as init.lua\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003esourceCScope\u003c/span\u003e()\n  vim.fn[\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;tools#loadCscope\u0026#39;\u003c/span\u003e]() \u003cspan style=\"color:#0f0\"\u003e-- no arguments needed\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#ff0\"\u003envim_create_augroups\u003c/span\u003e(definitions)\n  \u003cspan style=\"color:#f00\"\u003efor\u003c/span\u003e group_name, definition \u003cspan style=\"color:#f00\"\u003ein\u003c/span\u003e pairs(definitions) \u003cspan style=\"color:#f00\"\u003edo\u003c/span\u003e\n    vim.api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;augroup \u0026#39;\u003c/span\u003e..group_name)\n    vim.api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;autocmd!\u0026#39;\u003c/span\u003e)\n    \u003cspan style=\"color:#f00\"\u003efor\u003c/span\u003e _, def \u003cspan style=\"color:#f00\"\u003ein\u003c/span\u003e ipairs(definition) \u003cspan style=\"color:#f00\"\u003edo\u003c/span\u003e\n      \u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e command = table.concat(vim.tbl_flatten{\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;autocmd\u0026#39;\u003c/span\u003e, def}, \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e)\n      vim.api.nvim_command(command)\n    \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n    vim.api.nvim_command(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;augroup END\u0026#39;\u003c/span\u003e)\n  \u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\u003cspan style=\"color:#f00\"\u003eend\u003c/span\u003e\n\n\u003cspan style=\"color:#f00\"\u003elocal\u003c/span\u003e autocmds = {\n  startup = {\n    {\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;VimEnter\u0026#34;\u003c/span\u003e,        \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e,      \u003cspan style=\"color:#87ceeb\"\u003e[[lua sourceCScope()]]\u003c/span\u003e};\n  }\n}\n\nnvim_create_augroups(autocmds)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e","desc":"Learn how to integrate lua into your vim configuration","permalink":"https://teukka.tech/posts/2019-12-19-luanvim/","section":"posts","tags":["nvim","lua","neovim"],"title":"From init.vim to init.lua"},{"contents":"\u003cp\u003eIn Fall 2019, I took a trip around Central Europe. I visited Austria, Slovakia, Hungary, and Germany.\u003c/p\u003e\n\u003cp\u003e\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"A village at the foot of a mountain. Snow is powdered down the mountain, but does not reach the village which sits on the side of a lake, just after a forest.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/villagealps.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/villagealps.webp\"\n        alt=\"A village at the foot of a mountain. Snow is powdered down the mountain, but does not reach the village which sits on the side of a lake, just after a forest.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eVillage in the German alps.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Panorama overlooking the town of Berchtesgaden, Germany. The Watzmann peak is visible in the background and covered in snow.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/berchtesgaden.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/berchtesgaden.webp\"\n        alt=\"Panorama overlooking the town of Berchtesgaden, Germany. The Watzmann peak is visible in the background and covered in snow.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eBerchtesgaden, Germany.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Sunset the skyline of Buda in Budapest. Overlooks an old buildings with copper colored roofs with the Danube in the background.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/skylinebudapest.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/skylinebudapest.webp\"\n        alt=\"Sunset the skyline of Buda in Budapest. Overlooks an old buildings with copper colored roofs with the Danube in the background.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eBudapest Skyline\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Mosaic inlay on a brick wall. Two angels holding a seal.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/wallbudapest.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/wallbudapest.webp\"\n        alt=\"Mosaic inlay on a brick wall. Two angels holding a seal.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eWall in Budapest.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Man at Work statue. A bronze cast statue of a man peering out of a manhole.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/workingman.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/workingman.webp\"\n        alt=\"Man at Work statue. A bronze cast statue of a man peering out of a manhole.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eMan at Work. Bratislava\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Blue church fo St. Elsabeth at twighlight.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/bluechurch.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/bluechurch.webp\"\n        alt=\"Blue church fo St. Elsabeth at twighlight.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eChurch of St. Elisabeth. Bratislava.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Grass path between oak trees in the fall.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/hikebudapest.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/hikebudapest.webp\"\n        alt=\"Grass path between oak trees in the fall.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eHiking in the Budapest foothills\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Stag sitting on a bed of dried oak leaves\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/stagbudapest.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/stagbudapest.webp\"\n        alt=\"Stag sitting on a bed of dried oak leaves\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eStag. Budapest.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Statue of a man on a horse with a flag in his hands. The horse is reared up on its hind legs.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/statuevienna.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/statuevienna.webp\"\n        alt=\"Statue of a man on a horse with a flag in his hands. The horse is reared up on its hind legs.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eVienna.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Inside the Art History Museum in Vienna. View of painted vaulted ceilings\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/museumvienna.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/museumvienna.webp\"\n        alt=\"Inside the Art History Museum in Vienna. View of painted vaulted ceilings\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eArt History Museum, Vienna.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"A town square with a large stone orb held up by lions with the date 1688 inscribed at the base.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/townsquare.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/townsquare.webp\"\n        alt=\"A town square with a large stone orb held up by lions with the date 1688 inscribed at the base.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eSquare in Székesfehérvár\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"Bronze cast statue of an old woman pushing a cart\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/statueszfr.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/statueszfr.webp\"\n        alt=\"Bronze cast statue of an old woman pushing a cart\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eAunt Kati statue in Székesfehérvár\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"A creek by a road in fall. Red fallen leaves are scattered on still green moss. The water is bright blue.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/creekbyroad.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/creekbyroad.webp\"\n        alt=\"A creek by a road in fall. Red fallen leaves are scattered on still green moss. The water is bright blue.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eStream in the German Alps.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"A fountain with bronze cast statues depicting a man with a hunting party and hounds. A slain stag lies at the man\u0026#39;s feet.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/fountainbudapest.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/fountainbudapest.webp\"\n        alt=\"A fountain with bronze cast statues depicting a man with a hunting party and hounds. A slain stag lies at the man\u0026#39;s feet.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eFountain in Budapest.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"A statue with a heart and the letters SZFV\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/heartszfv.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/heartszfv.webp\"\n        alt=\"A statue with a heart and the letters SZFV\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eSzékesfehérvár, Hungary.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\n\u003cdiv class=\"picture\"\u003e\n  \n  \u003cfigure\u003e\n  \n    \u003cpicture\n     title=\"An old tower with an astrological clock. There is a figure of a man with a fancy costume above the clock.\"\u003e\n      \n      \n      \u003csource\n        srcset=\"/images/towerszkr.webp\"\n        \u003e\n      \n      \n      \n      \n      \n      \n      \u003cimg\n        class=\"u-photo\"\n        src=\"/images/towerszkr.webp\"\n        alt=\"An old tower with an astrological clock. There is a figure of a man with a fancy costume above the clock.\" \u003e\n    \u003c/picture\u003e\n  \n    \u003cfigcaption\u003eClock in Székesfehérvár, Hungary.\u003c/figcaption\u003e\n  \u003c/figure\u003e\n  \n\u003c/div\u003e\n\u003c/p\u003e\n","desc":"Pictures from Central Europe, Fall 2019","permalink":"https://teukka.tech/photos/central-europe/","section":"photos","tags":[],"title":"Central Europe"},{"contents":"\u003ch2 id=\"part-two-data-fetching-on-mount\"\u003ePart Two, Data Fetching on Mount\u003c/h2\u003e\n\u003cp\u003eAsynchronous actions are essential in any modern web application. The ability to fetch data from some service and display it to users is an important part of building a framework to support these applications. In order for our components to do this, we need to refactor. Our component calls \u003ccode\u003emount\u003c/code\u003e when we want to render it on the page, but this function only serves to attach styles and event handlers to the component, not fetch data asynchronously. To accommodate actions taken after our component has been defined, but before it is actually rendered, we need a new method: \u003ccode\u003ecomponentDidMount\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecomponentDidMount\u003c/code\u003e method will be called just before the component\u0026rsquo;s initial render. When called during this stage of the component\u0026rsquo;s life cycle, the \u003ccode\u003ecomponentDidMount\u003c/code\u003e method will not have access to any reference to the component\u0026rsquo;s children. As we implement more complex use cases for our components, the life cycle stage of \u003ccode\u003ecomponentDidMount\u003c/code\u003e will need to change in order to support features such as child refs.\u003c/p\u003e\n\u003cp\u003eMoving into our component code, we can do a bit of refactoring:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-diff\" data-lang=\"diff\"\u003eexport class Component {\n  constructor(element, args = {}) {\n    this.$$typeof = OUR_COMPONENT;\n    this.el = document.createElement(element);\n    this.args = args;\n  }\n\n + componentDidMount() {}\n\n  - mount() {\n  + setup() {\n  + if (this.args.style) this.applyStyles();\n  +  if (this.args.on) {\n  +    this.args.on.forEach(handler =\u0026gt; {\n  +      const [event, func] = Object.entries(handler)[0];\n  +      this.el.addEventListener(event, func);\n  +      Object.entries(handler).forEach(([event, func]) =\u0026gt; {\n  +        this.el.addEventListener(event, func);\n  +      });\n  +    });\n  +  }\n  }\n\n  render(children = []) {\n   + this.setup();\n   + this.componentDidMount();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBy default, we want the \u003ccode\u003ecomponentDidMount\u003c/code\u003e method to be a no-op since adding life cycle behavior is not always necessary. Logic for applying styles and event handlers is moved to a separate function so that it won\u0026rsquo;t be overridden by or need to be implemented in the \u003ccode\u003ecomponentDidMount\u003c/code\u003e method.\u003c/p\u003e\n\u003cp\u003eWe can now put these changes to use by creating a component which fetches an image from a server and applies it as the background of the element created in the component\u0026rsquo;s render method.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e { Component } from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./Component\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#0f0\"\u003e// fetch the image\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003e\u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e getImage(width, height) {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e response = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e fetch(\u003cspan style=\"color:#87ceeb\"\u003e`https://picsum.photos/\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003ewidth\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e/\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eheight\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e response.url;\n}\n\n\u003cspan style=\"color:#f00\"\u003eclass\u003c/span\u003e PageWrapper \u003cspan style=\"color:#f00\"\u003eextends\u003c/span\u003e Component {\n  \u003cspan style=\"color:#f00\"\u003easync\u003c/span\u003e componentDidMount() {\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e width = window.innerWidth;\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e height = window.innerHeight;\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.style.width = width + \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;px\u0026#34;\u003c/span\u003e;\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.style.height = height + \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;px\u0026#34;\u003c/span\u003e;\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e url = \u003cspan style=\"color:#f00\"\u003eawait\u003c/span\u003e getImage(width, height);\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.style.background = \u003cspan style=\"color:#87ceeb\"\u003e`url(\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eurl\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e)`\u003c/span\u003e;\n  }\n}\n\n\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e Container = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e PageWrapper(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;div\u0026#34;\u003c/span\u003e, {\n  style: { background: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;papayawhip\u0026#34;\u003c/span\u003e },\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOur newly created \u003ccode\u003ePageWrapper\u003c/code\u003e component will now fetch and display a full screen image when it is rendered. You may notice that there is no way to set an intermediary state for our component, such as generating some text to inform the user that the image is loading. This concept of local state will be covered by the next post.\u003c/p\u003e\n","desc":"Set up 'on mount' actions","permalink":"https://teukka.tech/posts/2019-10-01-byoff-part-2/","section":"posts","tags":["javascript","frontend","webdev"],"title":"Build Your Own Frontend Framework Part 2, Data Fetching"},{"contents":"\u003ch2 id=\"part-one-basic-component\"\u003ePart One, Basic Component\u003c/h2\u003e\n\u003cp\u003eComponents will be the basic building blocks of our frontend framework. Components will allow modular composition and encapsulation.\nThe first component implementation will be rather naive, but that\u0026rsquo;s alright since its implementation will evolve over time.\nLet\u0026rsquo;s start with creating a \u003ccode\u003eComponent\u003c/code\u003e class:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e COOL_COMPONENT = Symbol(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;component\u0026#34;\u003c/span\u003e);\n\n\u003cspan style=\"color:#f00\"\u003eclass\u003c/span\u003e Component {\n  constructor(element, args = {}) {\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.$$typeof = COOL_COMPONENT;\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el = document.createElement(element);\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args = args;\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eBreaking this down:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003econst COOL_COMPONENT = Symbol('component')\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis creates a unique representation for our component type, and will help identify component instances as they get passed around our framework.\nThe component takes an element type and some arguments which we\u0026rsquo;ll handle a bit later. The constructor also creates a new element which we\u0026rsquo;ll mount on the DOM with a \u003ccode\u003emount\u003c/code\u003e function.\nNow that we have a very basic component, we need a way to mount it to the DOM. Starting with a naive implementation, we can do something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003efunction\u003c/span\u003e renderToDOM(id, component) {\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e root = document.querySelector(\u003cspan style=\"color:#87ceeb\"\u003e`#\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e${\u003c/span\u003eid\u003cspan style=\"color:#87ceeb\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#87ceeb\"\u003e`\u003c/span\u003e);\n  root.appendChild(Component.el);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith this code, we can create components and mount them to the DOM. Let\u0026rsquo;s start building!\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;div id=\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;root\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;script\u0026gt;\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e div = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Component(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;div\u0026#34;\u003c/span\u003e);\n  renderToDOM(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;root\u0026#34;\u003c/span\u003e, div);\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThis is quite boring, so let\u0026rsquo;s add the ability to style our components and render sub components, or \u003ccode\u003echildren\u003c/code\u003e.\nTo do this, we will add a couple more methods to our \u003ccode\u003eComponent\u003c/code\u003e class. We\u0026rsquo;ll start with the \u003ccode\u003emount\u003c/code\u003e method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#0f0\"\u003e// inside Component class\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003emount() {\n  Object.entries(\u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args.style).forEach(([styleKey, styleValue]) =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.style[styleKey] = styleValue\n  })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIn the \u003ccode\u003emount\u003c/code\u003e method, we take a style object passed to the component in \u003ccode\u003eargs\u003c/code\u003e and append the component\u0026rsquo;s element with the given style property.\nWhile this currently doesn\u0026rsquo;t allow us to style components with css selectors, it does allow for simple inline styling that will help us troubleshoot components.\nFor our component to render children, we need to add a \u003ccode\u003erender\u003c/code\u003e method which will take children components as an argument and correctly render them out to the DOM.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#0f0\"\u003e// inside of Component class\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u003c/span\u003erender(children) {\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (!Array.isArray(children)) {\n    \u003cspan style=\"color:#f00\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Error(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;Children must be an array!\u0026#39;\u003c/span\u003e)\n  }\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e components = []\n  children.forEach(child =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (child.$$typeof === COOL_COMPONENT) {\n      components.push(child.el)\n    }\n    \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f00\"\u003etypeof\u003c/span\u003e child === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;string\u0026#39;\u003c/span\u003e) {\n      \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.appendChild(document.createTextNode(child))\n    }\n\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.append(...components)\n\n    \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e\n  })\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWhen given an array of children, \u003ccode\u003erender\u003c/code\u003e iterates through the array and checks if the child is a component. If it is, then it adds it to another array of components to be appended, if the child is a string, it is appended as a text node to the current component.\u003c/p\u003e\n\u003cp\u003ePutting all these pieces together looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e COOL_COMPONENT = Symbol(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;component\u0026#34;\u003c/span\u003e);\n\n\u003cspan style=\"color:#f00\"\u003eclass\u003c/span\u003e Component {\n  constructor(element, args = {}) {\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.$$typeof = COOL_COMPONENT;\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el = document.createElement(element);\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args = args;\n  }\n  mount() {\n    Object.entries(\u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args.style).forEach(([styleKey, styleValue]) =\u0026gt; {\n      \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.style[styleKey] = styleValue;\n    });\n  }\n\n  render(children) {\n    \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (!Array.isArray(children)) {\n      \u003cspan style=\"color:#f00\"\u003ethrow\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Error(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Children must be an array!\u0026#34;\u003c/span\u003e);\n    }\n    \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e components = [];\n    children.forEach((child) =\u0026gt; {\n      \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (child.$$typeof === COOL_COMPONENT) {\n        components.push(child.el);\n      }\n      \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f00\"\u003etypeof\u003c/span\u003e child === \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e) {\n        \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.appendChild(document.createTextNode(child));\n      }\n\n      \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.append(...components);\n\n      \u003cspan style=\"color:#f00\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e;\n    });\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026lt;!--- index.html ----\u0026gt;\u003c/span\u003e\n\u0026lt;div id=\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;root\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/div\u0026gt;\n\u0026lt;script\u0026gt;\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e div = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Component(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;div\u0026#34;\u003c/span\u003e, {\n    style: { height: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;300px\u0026#34;\u003c/span\u003e, width: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;300px\u0026#34;\u003c/span\u003e, background: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;papayawhip\u0026#34;\u003c/span\u003e },\n  });\n\n  \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e title = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Component(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;h1\u0026#34;\u003c/span\u003e);\n\n  div.render([title.render([\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;This is a title\u0026#34;\u003c/span\u003e])]);\n\n  renderToDOM(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;root\u0026#34;\u003c/span\u003e, div);\n\u0026lt;/script\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOne last thing to do for our basic component is to add event listeners. We can do this in the \u003ccode\u003emount\u003c/code\u003e method of our comonent:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\nmount() {\n  Object.entries(\u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args.style).forEach(([styleKey, styleValue]) =\u0026gt; {\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.style[styleKey] = styleValue\n  })\n  \u003cspan style=\"color:#f00\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args.on) {\n    \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.args.on.forEach(handler =\u0026gt; {\n      \u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e [event, func] = Object.entries(handler)[\u003cspan style=\"color:#f60\"\u003e0\u003c/span\u003e]\n      \u003cspan style=\"color:#f00\"\u003ethis\u003c/span\u003e.el.addEventListener(event, func)\n    })\n  }\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow we can pass an array of events and their respective handler functions to our component with the \u003ccode\u003eon\u003c/code\u003e argument.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003econst\u003c/span\u003e div = \u003cspan style=\"color:#f00\"\u003enew\u003c/span\u003e Component(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;div\u0026#34;\u003c/span\u003e, {\n  style: { height: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;300px\u0026#34;\u003c/span\u003e, width: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;300px\u0026#34;\u003c/span\u003e, background: \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;papayawhip\u0026#34;\u003c/span\u003e },\n  on: [{ click: () =\u0026gt; console.log(\u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;Hello there\u0026#34;\u003c/span\u003e) }],\n});\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWith that, we have a basic component that can be styled and have event listeners attached to it. Next time we\u0026rsquo;ll continue iterating on this component to improve the api and extending it to handle things like class names and asynchronous actions.\u003c/p\u003e\n","desc":"Setting up basic components in our framework","permalink":"https://teukka.tech/posts/2019-09-15-byoff-part-1/","section":"posts","tags":["webdev","javascript","learning"],"title":"Build Your Own Frontend Framework Part 1"},{"contents":"\u003cp\u003eWelcome to build your own frontend framework project! I will be coding this live on my \u003ca href=\"https://www.twitch.tv/slower_loris\"\u003etwitch stream\u003c/a\u003e.\nBlog posts will come after the streams.\u003c/p\u003e\n\u003ch2 id=\"goals\"\u003eGoals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBecome more familiar with some of the concepts that power modern frontend frameworks.\u003c/li\u003e\n\u003cli\u003eGain a deeper understanding of some of the challenges that arise in creating a JavaScript framework.\u003c/li\u003e\n\u003cli\u003eGet better at writing JavaScript.\u003c/li\u003e\n\u003cli\u003eSee how different frameworks solve common problems.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"non-goals\"\u003eNon Goals\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eBuild a production ready, competitive framework.\u003c/li\u003e\n\u003cli\u003eBuild a clone of {insert_popular_framework_here}.\u003c/li\u003e\n\u003cli\u003eCover all edge / business cases ( though we\u0026rsquo;ll try to cover most! ).\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"format\"\u003eFormat\u003c/h2\u003e\n\u003cp\u003eI code when I have time / motivation. For the livestream, I don\u0026rsquo;t have a set format, and the focus area of the stream depends on what challenges I run into while coding.\nBlog posts will be more structured and focused since they will be written after the stream. They will also include supplimentary materials if necessary. After the project is complete,\nI hope to compile the blog posts to be more cohesive and structured.\u003c/p\u003e\n","desc":"Introduction to the frontend framework project","permalink":"https://teukka.tech/posts/2019-09-09-build-your-own-frontend-framework/","section":"posts","tags":["javascript","frontend","learning"],"title":"Build Your Own Frontend Framework, Introduction"},{"contents":"\u003ch2 id=\"power-to-productivity\"\u003ePower to Productivity\u003c/h2\u003e\n\u003cp\u003eVim is a powerful tool which helps you stay productive and spend less time doing the mechanical work of coding.\nFor many, Vim seems archaic, under-featured, or even intimidating. I hope to illustrate that Vim none of those things, but is in fact a great editor for nearly every development environment.\u003c/p\u003e\n\u003cp\u003eI want to focus on three common tasks where Vim helps you be more productive without leaving your editor. These tasks are: navigation between files, and searching / replacing.\nNo Vim experience is necessary for this post, but it definitely helps if you are at least familiar with the basics through \u003ccode\u003evimtutor\u003c/code\u003e.\u003c/p\u003e\n\u003ch2 id=\"navigation-between-files\"\u003eNavigation Between Files\u003c/h2\u003e\n\u003cp\u003eOne of the most common and time consuming activities we do as developers every day is jump between files.\nIf you are using a more traditional text editor such as VSCode, Sublime Text, or Atom, chances are you spend more time that you would like\nscanning through your directory tree trying to find the right file. With Vim, the secret to file navigation begins with \u003ccode\u003eset path\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003epath\u003c/code\u003e is where Vim searches for files when executing the various search commands. By default on Unix-like systems, it is \u003ccode\u003e.,/usr/include,,\u003c/code\u003e. Let\u0026rsquo;s break this down a bit. The first \u003ccode\u003e.\u003c/code\u003e indicates that Vim should include files relative to the current file\u0026rsquo;s directory.\nDirectories that should be searched are separated by commas, so the next place Vim will look by default is the \u003ccode\u003e/usr/include/\u003c/code\u003e directory.\nThis directory typically contains headers so it can be useful if you are doing C and C++ programming. The final sequence of \u003ccode\u003e,,\u003c/code\u003e instructs Vim to search in the current directory.\nOut of the box, we are able to search a large part of our project. What if we wanted to search downward recursively through our project?\nIt is common to open your text editor in your project root ( often denoted by a vcs file such as a \u003ccode\u003e.git\u003c/code\u003e folder ).\nTo ensure that Vim finds all of our project files when we search for them, we use \u003ccode\u003e*\u003c/code\u003e and \u003ccode\u003e**\u003c/code\u003e.\nThe asterisks represent wildcards, with \u003ccode\u003e*\u003c/code\u003e matching 0 or more characters and \u003ccode\u003e**\u003c/code\u003e matching only directories. By setting your path to \u003ccode\u003eset path=.,,,**\u003c/code\u003e, you can ensure that Vim will search all our project files.\nOne caveat to this is that by default \u003ccode\u003e**\u003c/code\u003e only searches 30 directories deep, so if you have an extremely nested directory structure, you can increase that limit, see \u003ccode\u003e:h starstar\u003c/code\u003e for more details.\nNow that we have our path correctly set, it\u0026rsquo;s time to navigate! Vim has a built in keybinding for jumping to the file under your cursor, and it is \u003ccode\u003egf\u003c/code\u003e. We tell Vim which file endings it should add by using \u003ccode\u003eset suffixesadd\u003c/code\u003e.\nSo for frontend web development, you might have something in your \u003ccode\u003evimrc\u003c/code\u003e that looks like this: \u003ccode\u003eau! BufNewFile,BufRead *.js,*.jsx suffixesadd+=.js,.jsx\u003c/code\u003e. This allows us to jump to files with endings \u003ccode\u003e.js and .jsx\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn practice it looks like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan style=\"color:#f00\"\u003eimport\u003c/span\u003e { someFunction } from \u003cspan style=\"color:#87ceeb\"\u003e\u0026#34;./utils\u0026#34;\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003ePlacing your cursor in normal mode on \u003ccode\u003e./utils\u003c/code\u003e and pressing \u003ccode\u003egf\u003c/code\u003e should take\nyou to the \u003ccode\u003eutils.js\u003c/code\u003e file!\u003c/p\u003e\n\u003cp\u003eThis is just the tip of the iceberg of what Vim can do when it comes to searching through your code, for a more in-depth take on this, I would recommend the blog post, \u003ca href=\"https://vimways.org/2018/death-by-a-thousand-files/\"\u003edeath by a thousand files\u003c/a\u003e.\nI want to show one more useful command that benefits from having set our \u003ccode\u003epath\u003c/code\u003e to search downward recursively and that is \u003ccode\u003efind\u003c/code\u003e. With \u003ccode\u003efind\u003c/code\u003e, Vim will search for a file and then open it for editing if the file is found. We can also use\n\u003ccode\u003e*\u003c/code\u003e wildcard expansion and tab completion if we have the \u003ccode\u003ewildmenu\u003c/code\u003e setting on.\u003c/p\u003e\n\u003cp\u003eFor example, typing: \u003ccode\u003e:find N*C*.jsx\u003c/code\u003e and pressing tab would expand to \u003ccode\u003eNavigationContainer.jsx\u003c/code\u003e. You could also type \u003ccode\u003eNavigation\u003c/code\u003e and tab to expand all the options that Vim finds in the current path. Just like that, you can fuzzy search through your project without any additional configuration or plugins.\nSometimes, there are directories in the project which we would like to ignore, such as \u003ccode\u003enode_modules\u003c/code\u003e, \u003ccode\u003etarget\u003c/code\u003e, and \u003ccode\u003edist\u003c/code\u003e. Vim determines which files to ignore via the \u003ccode\u003ewildignore\u003c/code\u003e setting.\nA sample \u003ccode\u003ewildignore\u003c/code\u003e may look like this: \u003ccode\u003eset wildignore=*/dist*/*,*/target/*,*/builds/*,*/node_modules/*\u003c/code\u003e. Vim will no longer include these directories in it\u0026rsquo;s path.\u003c/p\u003e\n\u003ch2 id=\"find-and-replace\"\u003eFind and Replace\u003c/h2\u003e\n\u003cp\u003eBy default, Vim ships with \u003ccode\u003evimgrep\u003c/code\u003e which allows you to search for strings within files. Vim also comes with the \u003ccode\u003egrep\u003c/code\u003e command which allows you to search\nusing an external grep tool. I personally use \u003ca href=\"https://github.com/BurntSushi/ripgrep\"\u003eripgrep\u003c/a\u003e, a grep tool that is focused on speed and respects my \u003ccode\u003e.gitignore\u003c/code\u003e file by default.\u003c/p\u003e\n\u003cp\u003eTo enable Vim to use ripgrep ( or any other grep program ) as a backend to the \u003ccode\u003egrep\u003c/code\u003e command, you need to set the grep program in your vimrc:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003eset grepprg=rg --smart-case --vimgrep\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow you have your search results loaded in the quickfix menu, and can leverage a Vim built-in plugin, \u003ccode\u003ecfilter\u003c/code\u003e. To add it, simply run \u003ccode\u003e:packadd cfilter\u003c/code\u003e and Vim will load the plugin for use. \u003ccode\u003ecfilter\u003c/code\u003e filters through entries in the quickfix list via regex.\u003c/p\u003e\n\u003cp\u003eIf you have search results that look like this:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edatastructures.html|623| 30:        mixpanel.track(\u0026quot;data structures loaded\u0026quot;);\nindex.html|61| 26:          \u0026lt;a href=\u0026quot;./datastructures.html\u0026quot;\nindex.html|62| 19:            \u0026gt;Data Structure Memes For Edgy JavaScript Teens\u0026lt;/a\n_site/index.js|64| 28:           import { customStructure } from './datstructures'\n_site/utils.js|64| 28:           import { customStructure } from 'custom/datstructures'\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003eIf you want to only keep the search results from the JavaScript files, you run this command: \u003ccode\u003e:Cfilter! html\u003c/code\u003e. This keeps everything except matches that contain\n\u003ccode\u003ehtml\u003c/code\u003e in the quickfix list. If you wanted only to keep only the third match, you run \u003ccode\u003e:Cfilter Memes\u003c/code\u003e and it keeps only matches containing \u003ccode\u003eMemes\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eOne more useful command when using the quickfix list is \u003ccode\u003e:cfdo\u003c/code\u003e. It allows you to execute whatever command you give it across the entire quickfix list.\nFor example, if you wanted to search and replace you could do it like this:\u003c/p\u003e\n\u003cp\u003esearch for the phrase, \u0026lsquo;data structures\u0026rsquo;:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e:grep! 'data structures'\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eview results:\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003edatastructures.html|279| 15:              Data Structures\ndatastructures.html|574| 26:              with these data structures, since the structure of our data is\ndatastructures.html|575| 43:              irrelevant to react, custom data structures should be simple to\ndatastructures.html|623| 25:        mixpanel.track(\u0026quot;data structures loaded\u0026quot;);\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003echange \u0026lsquo;structures\u0026rsquo; to singular \u0026lsquo;structure\u0026rsquo; and save every file:\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003e:cfdo s/ures/ure | update\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003e| update\u003c/code\u003e part of that last command tells Vim to save the changes after it executes the replace. If you wanted to check your changes\nbefore saving, you leave that part off. You still have to save every file manually if you choose this option.\u003c/p\u003e\n\u003ch2 id=\"grep-tips\"\u003eGrep tips\u003c/h2\u003e\n\u003cp\u003eVim makes finding and replacing throughout a large codebase fast and easy. To make it even faster and easier, here are some things for your \u003ccode\u003evimrc\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-viml\" data-lang=\"viml\"\u003eset grepprg=rg\\ --smart-case\\ --vimgrep \u003cspan style=\"color:#0f0\"\u003e\u0026#34; set grep program to ripgrep with smartcase flag. You can set it to anything you like.\u003c/span\u003e\n\u003cspan style=\"color:#0f0\"\u003e\n\u003c/span\u003e\u003cspan style=\"color:#0f0\"\u003e\u0026#34; creates a :SearchProject command, makes it so you don\u0026#39;t have to escape strings in ripgrep, will tab compete with directories in path.\u003c/span\u003e\ncommand! -nargs=+ -complete=dir -bar SearchProject execute \u003cspan style=\"color:#87ceeb\"\u003e\u0026#39;silent! grep!\u0026#39;\u003c/span\u003e.\u0026lt;q-args\u0026gt;.\u003cspan style=\"color:#87ceeb\"\u003e\u0026#39; | cwindow\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI hope that this post helps improve your Vim experience!\u003c/p\u003e\n","desc":"Exploring some of the built in functionality of Vim you may not know exists","permalink":"https://teukka.tech/posts/2019-08-25-vimcandothat/","section":"posts","tags":["vim","neovim","productivity"],"title":"Vim does that already"},{"contents":"","desc":"","permalink":"https://teukka.tech/bookmarks/206/","section":"bookmarks","tags":["society / economics"],"title":"A schoolman's guide to Marshall McLuhan"},{"contents":"\u003cp\u003eAn introduction to Data Oriented Design with Rust An introduction to Data Oriented Design with Rust In the post we will investigate the main …\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/110/","section":"bookmarks","tags":["rust"],"title":"An introduction to Data Oriented Design with Rust - Statistically Insignificant"},{"contents":"\u003cp\u003eDe Morgan\u0026rsquo;s laws are a pair of boolean algebra rules, if written in javascript-style boolean expressions, they look like this:\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/94/","section":"bookmarks","tags":["javascript"],"title":"De Morgan's Laws"},{"contents":"\u003cp\u003eCouple of weeks ago we started a series aimed at digging deeper into JavaScript and how it actually works: we thought that by knowing the…\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/91/","section":"bookmarks","tags":["javascript","programming"],"title":"How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code"},{"contents":"\u003cp\u003eI blog mostly about my own programming projects.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/125/","section":"bookmarks","tags":["programming","rust"],"title":"Index 1,600,000,000 Keys with Automata and Rust - Andrew Gallant's Blog"},{"contents":"\u003cp\u003eA catalogue of Rust design patterns, anti-patterns and idioms\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/106/","section":"bookmarks","tags":["rust"],"title":"Introduction - Rust Design Patterns"},{"contents":"\u003ch4 id=\"welcome-to-the-knowledge-base\"\u003eWelcome to the knowledge base.\u003c/h4\u003e\n\u003chr\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eMy notes are hosted \u003ca href=\"https://notebook.teukka.tech\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ch3 id=\"reading\"\u003eReading\u003c/h3\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth style=\"text-align:left\"\u003eTitle\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eAuthor\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eRating\u003c/th\u003e\n\u003cth style=\"text-align:left\"\u003eRead On\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eMastering Rust\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eVesa Kaihlavirta\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3.5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/07/18\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eAs I Walked Out One Midsummer Morning: A Memoir\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLaurie Lee\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/06/25\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Idea Factory: Bell Labs and the Great Age of American Innovation\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJon Gertner\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/06/06\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eWork: A Deep History, from the Stone Age to the Age of Robots\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJames Suzman\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/04/27\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eOur Magnificent Bastard Tongue: The Untold History of English\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJohn McWhorter\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/03/31\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eVirtue Hoarders: The Case against the Professional Managerial Class\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eCatherine Liu\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/03/15\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eSing to It: New Stories\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAmy Hempel\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/02/21\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eAmusing Ourselves to Death: Public Discourse in the Age of Show Business\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eNeil Postman\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/01/31\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRythm of War\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eBrandon Sanderson\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/01/25\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eOathbringer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eBrandon Sanderson\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2021/01/17\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Monk of Mokha\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eDave Eggers\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/12/28\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eWords of Radiance\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eBrandon Sanderson\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/12/27\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Way of Kings\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eBrandon Sanderson\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/12/23\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eMind Management, Not Time Management: Productivity When Creativity Matters (Getting Art Done Book 2)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eDavid Kadavy\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/11/22\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Metaphysical Elements of Ethics\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eImmanuel Kant\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/10/19\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Making of a Manger: What to Do When Everyone Looks To You\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJulie Zhou\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/10/14\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eDeep Work\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eCal Newport\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/09/27\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Hard Thing About Hard Things\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eBen Horowitz\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/08/26\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Cuckoo\u0026rsquo;s Egg\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eClifford Stoll\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/08/13\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eKing Leopold\u0026rsquo;s Ghost\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAdam Hochshild\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/08/04\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Culture Code: The Secrets of Highly Successful Groups\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eDaniel Coyle\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/08/03\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Art of Doing Science and Engineering: Learning to Learn\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRichard Hamming\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/07/26\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe End of Policing\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAlex Vitale\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/07/09\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eHow to Take Smart Notes\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eSonke Ahrens\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/07/06\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eLies My Teacher Told Me: Everything your American History Textbook Got Wrong\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJames W. Loewen\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/06/28\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eWhy We Sleep: Unlocking the Power of Sleep and Dreams\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eMatthew Walker\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/06/28\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Philosophy of Walking\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFredric Gros, Clifford Harper, John Howe\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/05/30\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eZen and the Art of Motorcycle Maintenence\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRobert Pirsig\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/05/23\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eShape Up: Stop Running in Circles and Ship Work that Matters\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRyan Singer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/05/04\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ea definition and criticism of cybercommunism\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eTere Vadén and Juha Suoranta\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/01/03\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Science of Managing Our Digital Stuff\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eOfer Bergman\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/05/02\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Englishman\u0026rsquo;s Food: Five Centuries of English Diet\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJ.C. Drummond\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/04/17\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRemote: Office Not Required\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJason Fried\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/03/11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eDeep JavaScript: Theory and techniques\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAxel Rauschmayer\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/03/06\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Wandering Earth: Classic Science Fiction Collection\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLiu Cixin\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/02/26\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe First Cell: And the Human Costs of Pursuing Cancer to the Last\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAzra Raza\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/02/09\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eBabel: Around the World in Twenty Languages\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eGaston Dorren\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/01/11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eHyperion (Hyperion Cantos #1)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eDan Simmons\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2020/01/11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eGuns Germs, and Steel: The Fates of Human Societies\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJared Diamond\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/12/26\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Bhagavad Gita\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eKrishna-Dwaipayana Vyasa\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/11/07\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eReligio Medici\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eThomas Browne\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/11/06\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Enemy at the Gate: Habsburgs, Ottomans, and the Battle for Europe\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eAndrew Wheatcroft\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/11/05\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eMeditations\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eMarcus Aurelius\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/11/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Dark Forest\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eHugh Walpole\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/10/29\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eDune\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFrank Herbert\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/07/20\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eTestament Of Youth: An Autobiographical Study Of The Years 1900-1925\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eVera Brittain\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/06/29\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eDeath\u0026rsquo;s End (Remembrance of Earth’s Past #3)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLiu Cixin\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/06/23\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Three-Body Problem (Remembrance of Earth’s Past #1)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLiu Cixin\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/06/22\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Dark Forest (Remembrance of Earth’s Past #2)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLiu Cixin\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2019/06/18\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003e2001: A Space Odyssey (Space Odyssey #1)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2018/05/03\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eNo Man Knows My History (Arkosh History)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFawn M. Brodie\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/10/13\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Principles of Object-Oriented JavaScript\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eNicholas C. Zakas\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/06/22\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eJust for Fun: The Story of an Accidental Revolutionary\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eLinus Torvalds\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/06/10\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Empire of Russia From the Remotest Periods to the Present Time\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJohn S.C. Abbott\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/06/03\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eWaiting for an Army to Die: The Tragedy of Agent Orange\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFred A. Wilcox\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/06/03\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003ePale Blue Dot: A Vision of the Human Future in Space\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eCarl Sagan\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/05/29\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eWar is a Racket\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eSmedley D. Butler\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/05/29\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eA Spy\u0026rsquo;s Guide to Thinking\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eJohn Braddock\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2017/02/24\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Songs Of Distant Earth\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/12/25\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eBreakfast of Champions\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eKurt Vonnegut Jr.\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/12/19\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRama Revealed (Rama #4)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/12/16\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Garden of Rama (Rama #3)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/12/11\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRama II (Rama #2)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/12/07\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eRendezvous with Rama (Rama #1)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/12/02\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Star (The Collected Stories of Arthur C. Clarke #3)\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eArthur C. Clarke\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/11/28\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe New Jim Crow: Mass Incarceration in the Age of Colorblindness\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eMichelle Alexander\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/09/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eStigum\u0026rsquo;s Money Market\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eMarcia Stigum\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/08/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eOpium Nation: Child Brides, Drug Lords, and One Woman\u0026rsquo;s Journey Through Afghanistan\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eFariba Nawa\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/08/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eHistory of Economic Thought: A Critical Perspective\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eE.K. Hunt\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/05/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Worldly Philosophers\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRobert L. Heilbroner\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eEnvironmental Economics: An Elementary Introduction\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eR. Kerry Turner\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e1\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2016/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Race for What\u0026rsquo;s Left: The Global Scramble for the World\u0026rsquo;s Last Resources\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eMichael T. Klare\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2015/03/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eWilderness and the American Mind\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRoderick Nash\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2015/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eLand Use and Society, Revised Edition: Geography, Law, and Public Policy\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eRutherford H. Platt\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2015/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Snows of Kilimanjaro and Other Stories\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eErnest Hemingway\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2015/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eTriumph of the City: How Our Greatest Invention Makes Us Richer, Smarter; Greener, Healthier, and Happier\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eEdward L. Glaeser\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2014/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eHumans in the Landscape: An Introduction to Environmental Studies\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eKai N. Lee\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2014/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eEmerald City: An Environmental History of Seattle\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eMatthew Klingle\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2014/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eChanges in the Land: Indians, Colonists, and the Ecology of New England\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eWilliam Cronon\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2014/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eCrimes against Nature: Squatters, Poachers, Thieves, and the Hidden History of American Conservation\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eKarl Jacoby\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e5\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2014/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eBlessed Unrest: How the Largest Social Movement in History Is Restoring Grace, Justice, and Beauty in the World\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003ePaul Hawken\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e4\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2013/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd style=\"text-align:left\"\u003eThe Green Collar Economy: How One Solution Can Fix Our Two Biggest Problems\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003eVan Jones\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e3\u003c/td\u003e\n\u003ctd style=\"text-align:left\"\u003e2013/01/01\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n","desc":"A free-form collection of notes, essays, and book reviews.","permalink":"https://teukka.tech/knowledgebase/","section":"","tags":null,"title":"Knowledge Base"},{"contents":"\u003cp\u003eThe lived experiences of digital platform users is at odds with how these systems are designed. Weaponised design – a process that allows for harm of users within the defined bounds of a designed system – is faciliated by designers who are oblivious to the politics of digital infrastructure or consider their design practice output to be apolitical. Despite traumatic events against users with increasing regularity, addressing the weaponisation of design is not yet a priority, and is still to be addressed by the design community.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/216/","section":"bookmarks","tags":["society / economics"],"title":"On Weaponised Design ~ Shiba Computer"},{"contents":"","desc":"","permalink":"https://teukka.tech/bookmarks/205/","section":"bookmarks","tags":["society / economics"],"title":"THE ENVIRONMENTAL ISSUES WITH CRYPTOART WILL BE SOLVED SOON, RIGHT? | Medium"},{"contents":"\u003cp\u003eAnthropologist Wade Davis writes about Covid-19 and its devastating impact on the international standing of the United States.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/214/","section":"bookmarks","tags":["society / economics"],"title":"The Unraveling of America"},{"contents":"\u003cp\u003eThe label now has many meanings, but when the group protested 200 years ago, technology wasn\u0026rsquo;t really the enemy\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/211/","section":"bookmarks","tags":["society / economics","technology"],"title":"What the Luddites Really Fought Against | History | Smithsonian Magazine"},{"contents":"\u003cp\u003eLeveraging functional programming in JavaScript to make builds faster and leaner.\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/249/","section":"bookmarks","tags":["builds","javascript","reference"],"title":"Why using `_.chain` is a mistake."},{"contents":"\u003cp\u003eThis article is part of a series which will hopefully lead to the creation of an open article about technological dissemination and the n\u0026hellip;\u003c/p\u003e\n","desc":"","permalink":"https://teukka.tech/bookmarks/217/","section":"bookmarks","tags":["society / economics"],"title":"Work notebooks: Against Hackerism, pt. 1"}]