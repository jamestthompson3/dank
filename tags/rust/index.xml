<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on teukka.tech</title><link>https://teukka.tech/tags/rust/</link><description>Recent content in Rust on teukka.tech</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 13 May 2021 09:55:50 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://teukka.tech/updates/35750/</link><pubDate>Thu, 13 May 2021 09:55:50 +0000</pubDate><guid>https://teukka.tech/updates/35750/</guid><description>&lt;p>The more I use Rust, the more I appreciate how good the built in tooling is. Not having to configure separate test runners, packagers, package managers, etc for each project results in a huge reduction of mental overhead and allows you to just focus on writing code&lt;/p></description></item><item><title>Peer Discovery over UDP</title><link>https://teukka.tech/posts/2020-07-12-peerdiscover/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2020-07-12-peerdiscover/</guid><description>&lt;h3 id="what-is-peer-discovery">What is Peer discovery&lt;/h3>
&lt;p>Peer discovery allows you to discover other computers on the same subnet, intranet, or through the internet. Discovering peers directly removes the necessity of a centralized server architecture, reducing the number of network jumps your packets require to share information with each other. Peer discovery can be used in: discovering microservices in the same docker network or kubernetes cluster, file sharing (like airdrop and bittorrent), and peer to peer gaming. Eliminating a centralized communication server can reduce operating costs, improve communication times between clients, and lead to more robust services since there is no single point of failure. Taking advantage of the benefits listed above requires a decentralized architecture.&lt;/p></description></item></channel></rss>