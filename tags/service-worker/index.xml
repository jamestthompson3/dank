<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Service Worker on teukka.tech</title><link>https://teukka.tech/tags/service-worker/</link><description>Recent content in Service Worker on teukka.tech</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 07 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/service-worker/index.xml" rel="self" type="application/rss+xml"/><item><title>Build a Better Web with Service Workers</title><link>https://teukka.tech/posts/2020-03-07-serviceworker/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2020-03-07-serviceworker/</guid><description>&lt;h2 id="working-hard-or-hardly-working"&gt;Working Hard, or Hardly Working?&lt;/h2&gt;
&lt;p&gt;The Service Worker API is a powerful tool for providing better offline experiences, push notifications, and background syncing for web applications. Like me, you may be familiar with service workers from the role they play in creating Progressive Web Apps (PWAs), or from seeing them registered as part of the build output of &lt;code&gt;create-react-app&lt;/code&gt;. While this automatic output from build tools such as &lt;code&gt;create-react-app&lt;/code&gt; is very useful in getting started with PWAs, using the Service Worker API is much more beneficial to your application when tailored to your use cases. Let&amp;rsquo;s dive into the Service Worker API to see how it provides a better user experience in some common use cases, starting with caching network responses.&lt;/p&gt;</description></item></channel></rss>