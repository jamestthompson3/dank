<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on teukka.tech</title><link>https://teukka.tech/tags/programming/</link><description>Recent content in Programming on teukka.tech</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 19 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>What's next for Tendril Wiki</title><link>https://teukka.tech/posts/tendril-wiki-future/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/tendril-wiki-future/</guid><description>&lt;p>In my &lt;a href="https://teukka.tech/posts/tendril-wiki-lessons/">last post&lt;/a>, I discussed some of the lessons I learned from building my personal knowledge management tool, Tendril Wiki. I want to discuss my vision for the tool and ideas around knowledge management. The main goal of Tendril Wiki is to collapse the tools I use for managing information into a single, unified platform. The functionality in Tendril Wiki arises from my own personal needs or from features I&amp;rsquo;ve seen other platforms / tools implement and wanted for myself.&lt;/p></description></item><item><title>Lessons from Building Tendril Wiki</title><link>https://teukka.tech/posts/tendril-wiki-lessons/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/tendril-wiki-lessons/</guid><description>&lt;p>Over the past year and half, I&amp;rsquo;ve been working on a knowledge management tool called, &lt;a href="https://github.com/jamestthompson3/tendril-wiki">Tendril Wiki&lt;/a>. I&amp;rsquo;ve used it to organize my thoughts and catalogue information both at work and in my personal life. Tendril Wiki has served as a place for me to experiment with tooling ideas, gain more experience using the Rust programming language, and copy concepts from other tools for thought. After 18 months, I want to reflect on what I&amp;rsquo;ve learned and where I can improve.&lt;/p></description></item><item><title/><link>https://teukka.tech/updates/44844/</link><pubDate>Fri, 08 Oct 2021 12:27:24 +0000</pubDate><guid>https://teukka.tech/updates/44844/</guid><description>&lt;p>Creating a crappy version of something is the first step to creating a better version of something. It also helps you know what you don&amp;rsquo;t know :)&lt;/p></description></item><item><title/><link>https://teukka.tech/updates/35750/</link><pubDate>Thu, 13 May 2021 09:55:50 +0000</pubDate><guid>https://teukka.tech/updates/35750/</guid><description>&lt;p>The more I use Rust, the more I appreciate how good the built in tooling is. Not having to configure separate test runners, packagers, package managers, etc for each project results in a huge reduction of mental overhead and allows you to just focus on writing code&lt;/p></description></item><item><title/><link>https://teukka.tech/updates/54883/</link><pubDate>Sat, 27 Mar 2021 15:14:43 +0000</pubDate><guid>https://teukka.tech/updates/54883/</guid><description>&lt;p>&amp;ldquo;humans are quickly overwhelmed by concurrency and find it much more difficult to reason about concurrent than sequential code. Even careful people miss possible inter-leavings among even simple collections of partially ordered operations.&amp;rdquo;&lt;/p>
&lt;ul>
&lt;li>H. Sutter and J. Larus. Software and the concurrency revolution.&lt;/li>
&lt;/ul>
&lt;p>The fact that source code starts its life as text is part of what makes wrapping my head around concurrent programs difficult. Closure syntax like that in Rust&amp;rsquo;s &lt;code>std::thread::spawn&lt;/code> certainly help, but it still gets very tricky to keep things straight. I wonder what a non text interface for concurrent programming would look like&amp;hellip;&lt;/p></description></item></channel></rss>