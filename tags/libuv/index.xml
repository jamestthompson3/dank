<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Libuv on teukka.tech</title><link>https://teukka.tech/tags/libuv/</link><description>Recent content in Libuv on teukka.tech</description><generator>Hugo 0.125.2</generator><language>en-us</language><managingEditor>taylor@teukka.tech (taylor thompson)</managingEditor><webMaster>taylor@teukka.tech (taylor thompson)</webMaster><lastBuildDate>Wed, 31 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/libuv/index.xml" rel="self" type="application/rss+xml"/><item><title>(Nvim) Lua for Javascripters: Module Exports</title><link>https://teukka.tech/posts/js-to-lua-modules/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/js-to-lua-modules/</guid><description>Goals This aims to be quick reference guide on lua module exports compared to JavaScript module exports.
Task We want to export a series of module scoped functions in both JavaScript and Lua. This guide also show side by side comparisons on writing a file to a specific directory and deleting a file from the same directory.
In this quick tip, we will use CommonJS as the format for the JavaScript modules since it more closely resembles Lua modules in its construction.</description></item><item><title>(Nvim) Lua for Javascripters: Spawning Processes</title><link>https://teukka.tech/posts/js-to-lua/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/js-to-lua/</guid><description>Goals This should be a quick reference guide for those familiar with NodeJS on how to execute the same async tasks in Lua using luv. This is aimed towards use cases inside Neovim, but is not limited to those cases.
Task We want to spawn a child task to convert a markdown document into HTML using pandoc. This could be used as part of a publishing flow for a blog, for writing notes, or for implementing a markdown previewer.</description></item><item><title>Using LibUV in Neovim</title><link>https://teukka.tech/posts/2020-01-07-vimloop/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-01-07-vimloop/</guid><description>Off The Main Loop: Async Actions within Neovim Neovim embeds the libuv library in the editor and exposes lua (and to some extent vimscript through the jobstart function) bindings for interacting with the library&amp;rsquo;s API. This allows actions in the editor to happen asynchronously, keeping the main editor loop clear for user input. What this means practically for users is that actions which take a long time such as grepping through large projects, generating ctags, or linting can now be done in the background without blocking the user&amp;rsquo;s ability to keep editing text.</description></item></channel></rss>