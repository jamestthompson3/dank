<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>web dev on teukka.tech</title><link>https://teukka.tech/tags/web-dev/</link><description>Recent content in web dev on teukka.tech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>taylor@teukka.tech (taylor thompson)</managingEditor><webMaster>taylor@teukka.tech (taylor thompson)</webMaster><lastBuildDate>Sat, 07 Mar 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/web-dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Build a Better Web with Service Workers</title><link>https://teukka.tech/posts/2020-03-07-serviceworker/</link><pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-03-07-serviceworker/</guid><description>Working Hard, or Hardly Working? The Service Worker API is a powerful tool for providing better offline experiences, push notifications, and background syncing for web applications. Like me, you may be familiar with service workers from the role they play in creating Progressive Web Apps (PWAs), or from seeing them registered as part of the build output of create-react-app. While this automatic output from build tools such as create-react-app is very useful in getting started with PWAs, using the Service Worker API is much more beneficial to your application when tailored to your use cases.</description></item><item><title>A Brief Look at Javascript Proxies</title><link>https://teukka.tech/posts/2020-02-01-proxies/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>taylor@teukka.tech (taylor thompson)</author><guid>https://teukka.tech/posts/2020-02-01-proxies/</guid><description>Proxies Javascript Proxies are a powerful concept in ES6. They give developers more control over JS objects, paving the way for declarative API design. I am going to show some examples of how use proxies to extend the functionality of traditional Javascript objects and why they are useful in understanding the flow of data inside your programs.
Microservice Client The first example comes from a request management client that uses a JSON schema to validate incoming requests and route them to other services.</description></item></channel></rss>