<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Productivity on teukka.tech</title><link>https://teukka.tech/tags/productivity/</link><description>Recent content in Productivity on teukka.tech</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 11 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/productivity/index.xml" rel="self" type="application/rss+xml"/><item><title>Neovim Tip, Smarter Path</title><link>https://teukka.tech/posts/vimtip-path/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/vimtip-path/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Fuzzy finders can be a good tool for navigating files in a codebase, but they don&amp;rsquo;t give you the
same functionality as a properly set &lt;code>path&lt;/code> option in vim. Key mappings like &lt;code>gf&lt;/code>, &lt;code>[i&lt;/code>, &lt;code>[d&lt;/code>, and
commands like &lt;code>:find&lt;/code> depend on having your path set correctly to find the file you&amp;rsquo;re searching
for. Using the &lt;code>:find&lt;/code> command also gives us the ability to tab complete a file name, a feature
which fuzzy finders do not offer.&lt;/p></description></item><item><title>Neovim Tip, GitLens</title><link>https://teukka.tech/posts/2020-01-28-vimtip-gitlens/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2020-01-28-vimtip-gitlens/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens&lt;/a> is a VSCode plugin that, among other things, allows you to see the time, commit author, and commit message of the current line. With a little help from to the neovim api and our shell, it we can recreate this functionality in a few lines of lua code.&lt;/p>
&lt;h2 id="the-code">The Code&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0f0">-- in utils.lua&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">local&lt;/span> M = {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">local&lt;/span> api = vim.api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">function&lt;/span> M.&lt;span style="color:#ff0">blameVirtText&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">local&lt;/span> ft = vim.fn.expand(&lt;span style="color:#87ceeb">&amp;#39;%:h:t&amp;#39;&lt;/span>) &lt;span style="color:#0f0">-- get the current file extension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> ft == &lt;span style="color:#87ceeb">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#f00">then&lt;/span> &lt;span style="color:#0f0">-- if we are in a scratch buffer or unknown filetype&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> ft == &lt;span style="color:#87ceeb">&amp;#39;bin&amp;#39;&lt;/span> &lt;span style="color:#f00">then&lt;/span> &lt;span style="color:#0f0">-- if we are in nvim&amp;#39;s terminal window&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api.nvim_buf_clear_namespace(&lt;span style="color:#f60">0&lt;/span>, &lt;span style="color:#f60">2&lt;/span>, &lt;span style="color:#f60">0&lt;/span>, -&lt;span style="color:#f60">1&lt;/span>) &lt;span style="color:#0f0">-- clear out virtual text from namespace 2 (the namespace we will set later)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">local&lt;/span> currFile = vim.fn.expand(&lt;span style="color:#87ceeb">&amp;#39;%&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">local&lt;/span> line = api.nvim_win_get_cursor(&lt;span style="color:#f60">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">local&lt;/span> blame = vim.fn.system(string.format(&lt;span style="color:#87ceeb">&amp;#39;git blame -c -L %d,%d %s&amp;#39;&lt;/span>, line[&lt;span style="color:#f60">1&lt;/span>], line[&lt;span style="color:#f60">1&lt;/span>], currFile))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">local&lt;/span> hash = vim.split(blame, &lt;span style="color:#87ceeb">&amp;#39;%s&amp;#39;&lt;/span>)[&lt;span style="color:#f60">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">local&lt;/span> cmd = string.format(&lt;span style="color:#87ceeb">&amp;#34;git show %s &amp;#34;&lt;/span>, hash)..&lt;span style="color:#87ceeb">&amp;#34;--format=&amp;#39;%an | %ar | %s&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> hash == &lt;span style="color:#87ceeb">&amp;#39;00000000&amp;#39;&lt;/span> &lt;span style="color:#f00">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text = &lt;span style="color:#87ceeb">&amp;#39;Not Committed Yet&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text = vim.fn.system(cmd)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text = vim.split(text, &lt;span style="color:#87ceeb">&amp;#39;&lt;/span>&lt;span style="color:#87ceeb">\n&lt;/span>&lt;span style="color:#87ceeb">&amp;#39;&lt;/span>)[&lt;span style="color:#f60">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">if&lt;/span> text:gmatch(&lt;span style="color:#87ceeb">&amp;#34;fatal&amp;#34;&lt;/span>) &lt;span style="color:#f00">then&lt;/span> &lt;span style="color:#0f0">-- if the call to git show fails&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text = &lt;span style="color:#87ceeb">&amp;#39;Not Committed Yet&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f00">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api.nvim_buf_set_virtual_text(&lt;span style="color:#f60">0&lt;/span>, &lt;span style="color:#f60">2&lt;/span>, line[&lt;span style="color:#f60">1&lt;/span>] - &lt;span style="color:#f60">1&lt;/span>, {{ text,&lt;span style="color:#87ceeb">&amp;#39;GitLens&amp;#39;&lt;/span> }}, {}) &lt;span style="color:#0f0">-- set virtual text for namespace 2 with the content from git and assign it to the higlight group &amp;#39;GitLens&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">function&lt;/span> M.&lt;span style="color:#ff0">clearBlameVirtText&lt;/span>() &lt;span style="color:#0f0">-- important for clearing out the text when our cursor moves&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api.nvim_buf_clear_namespace(&lt;span style="color:#f60">0&lt;/span>, &lt;span style="color:#f60">2&lt;/span>, &lt;span style="color:#f60">0&lt;/span>, -&lt;span style="color:#f60">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">return&lt;/span> M
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#000;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#0f0">&amp;#34; in init.vim&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lua vim.api.nvim_command [[&lt;span style="color:#f00">autocmd&lt;/span> CursorHold * lua require&lt;span style="color:#87ceeb">&amp;#39;utils&amp;#39;&lt;/span>.blameVirtText()]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lua vim.api.nvim_command [[&lt;span style="color:#f00">autocmd&lt;/span> CursorMoved * lua require&lt;span style="color:#87ceeb">&amp;#39;utils&amp;#39;&lt;/span>.clearBlameVirtText()]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>lua vim.api.nvim_command [[&lt;span style="color:#f00">autocmd&lt;/span> CursorMovedI * lua require&lt;span style="color:#87ceeb">&amp;#39;utils&amp;#39;&lt;/span>.clearBlameVirtText()]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f00">hi&lt;/span>! link GitLens Comment
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Vim does that already</title><link>https://teukka.tech/posts/2019-08-25-vimcandothat/</link><pubDate>Sun, 25 Aug 2019 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2019-08-25-vimcandothat/</guid><description>&lt;h2 id="power-to-productivity">Power to Productivity&lt;/h2>
&lt;p>Vim is a powerful tool which helps you stay productive and spend less time doing the mechanical work of coding.
For many, Vim seems archaic, under-featured, or even intimidating. I hope to illustrate that Vim none of those things, but is in fact a great editor for nearly every development environment.&lt;/p>
&lt;p>I want to focus on three common tasks where Vim helps you be more productive without leaving your editor. These tasks are: navigation between files, and searching / replacing.
No Vim experience is necessary for this post, but it definitely helps if you are at least familiar with the basics through &lt;code>vimtutor&lt;/code>.&lt;/p></description></item></channel></rss>