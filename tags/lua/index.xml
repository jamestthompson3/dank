<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lua on teukka.tech</title><link>https://teukka.tech/tags/lua/</link><description>Recent content in Lua on teukka.tech</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 11 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://teukka.tech/tags/lua/index.xml" rel="self" type="application/rss+xml"/><item><title>Neovim Tip, Smarter Path</title><link>https://teukka.tech/posts/vimtip-path/</link><pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/vimtip-path/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>Fuzzy finders can be a good tool for navigating files in a codebase, but they don&amp;rsquo;t give you the
same functionality as a properly set &lt;code>path&lt;/code> option in vim. Key mappings like &lt;code>gf&lt;/code>, &lt;code>[i&lt;/code>, &lt;code>[d&lt;/code>, and
commands like &lt;code>:find&lt;/code> depend on having your path set correctly to find the file you&amp;rsquo;re searching
for. Using the &lt;code>:find&lt;/code> command also gives us the ability to tab complete a file name, a feature
which fuzzy finders do not offer.&lt;/p></description></item><item><title>(Nvim) Lua for Javascripters: Module Exports</title><link>https://teukka.tech/posts/js-to-lua-modules/</link><pubDate>Wed, 31 Mar 2021 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/js-to-lua-modules/</guid><description>&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>This aims to be quick reference guide on lua module exports compared to JavaScript module exports.&lt;/p>
&lt;h2 id="task">Task&lt;/h2>
&lt;p>We want to export a series of module scoped functions in both JavaScript and Lua. This guide also show side by side comparisons on writing a file to a specific directory and deleting a file from the same directory.&lt;/p>
&lt;p>In this quick tip, we will use CommonJS as the format for the JavaScript modules since it more closely resembles Lua modules in its construction.&lt;/p></description></item><item><title/><link>https://teukka.tech/updates/39029/</link><pubDate>Fri, 19 Mar 2021 10:50:29 +0000</pubDate><guid>https://teukka.tech/updates/39029/</guid><description>&lt;p>Wishing there was a way to compile &amp;ldquo;self contained&amp;rdquo; binaries with luvit. It seems that you still need to have libs like luvit in your path to run the binary when you compile your projects.&lt;/p></description></item><item><title>(Nvim) Lua for Javascripters: Spawning Processes</title><link>https://teukka.tech/posts/js-to-lua/</link><pubDate>Tue, 16 Mar 2021 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/js-to-lua/</guid><description>&lt;h2 id="goals">Goals&lt;/h2>
&lt;p>This should be a quick reference guide for those familiar with NodeJS on how to execute the same async tasks in Lua using luv. This is aimed towards use cases inside Neovim, but is not limited to those cases.&lt;/p>
&lt;h2 id="task">Task&lt;/h2>
&lt;p>We want to spawn a child task to convert a markdown document into HTML using &lt;a href="https://pandoc.org/">pandoc&lt;/a>. This could be used as part of a publishing flow for a blog, for writing notes, or for implementing a markdown previewer.&lt;/p></description></item><item><title/><link>https://teukka.tech/updates/37805/</link><pubDate>Mon, 15 Mar 2021 10:30:05 +0000</pubDate><guid>https://teukka.tech/updates/37805/</guid><description>&lt;p>Wondering if there are any guides out there for using lua for build scripting. Seems like it would be faster than spinning up a nodevm, easier to read and reason about that monster bash scripts, and less maintenance than a project written in something like Go or Rust.&lt;/p></description></item><item><title>Neovim Tip, GitLens</title><link>https://teukka.tech/posts/2020-01-28-vimtip-gitlens/</link><pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2020-01-28-vimtip-gitlens/</guid><description>&lt;h2 id="intro">Intro&lt;/h2>
&lt;p>&lt;a href="https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens">GitLens&lt;/a> is a VSCode plugin that, among other things, allows you to see the time, commit author, and commit message of the current line. With a little help from to the neovim api and our shell, it we can recreate this functionality in a few lines of lua code.&lt;/p>
&lt;h2 id="the-code">The Code&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- in utils.lua&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> M &lt;span style="color:#f92672">=&lt;/span> {}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> api &lt;span style="color:#f92672">=&lt;/span> vim.api
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">M&lt;/span>.&lt;span style="color:#a6e22e">blameVirtText&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> ft &lt;span style="color:#f92672">=&lt;/span> vim.fn.expand(&lt;span style="color:#e6db74">&amp;#39;%:h:t&amp;#39;&lt;/span>) &lt;span style="color:#75715e">-- get the current file extension&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ft &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#75715e">-- if we are in a scratch buffer or unknown filetype&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> ft &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;bin&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#75715e">-- if we are in nvim&amp;#39;s terminal window&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api.nvim_buf_clear_namespace(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>) &lt;span style="color:#75715e">-- clear out virtual text from namespace 2 (the namespace we will set later)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> currFile &lt;span style="color:#f92672">=&lt;/span> vim.fn.expand(&lt;span style="color:#e6db74">&amp;#39;%&amp;#39;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> line &lt;span style="color:#f92672">=&lt;/span> api.nvim_win_get_cursor(&lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> blame &lt;span style="color:#f92672">=&lt;/span> vim.fn.system(string.format(&lt;span style="color:#e6db74">&amp;#39;git blame -c -L %d,%d %s&amp;#39;&lt;/span>, line[&lt;span style="color:#ae81ff">1&lt;/span>], line[&lt;span style="color:#ae81ff">1&lt;/span>], currFile))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> hash &lt;span style="color:#f92672">=&lt;/span> vim.split(blame, &lt;span style="color:#e6db74">&amp;#39;%s&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> cmd &lt;span style="color:#f92672">=&lt;/span> string.format(&lt;span style="color:#e6db74">&amp;#34;git show %s &amp;#34;&lt;/span>, hash)&lt;span style="color:#f92672">..&lt;/span>&lt;span style="color:#e6db74">&amp;#34;--format=&amp;#39;%an | %ar | %s&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> hash &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;00000000&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Not Committed Yet&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> vim.fn.system(cmd)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> vim.split(text, &lt;span style="color:#e6db74">&amp;#39;&lt;/span>&lt;span style="color:#ae81ff">\n&lt;/span>&lt;span style="color:#e6db74">&amp;#39;&lt;/span>)[&lt;span style="color:#ae81ff">1&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> text:gmatch(&lt;span style="color:#e6db74">&amp;#34;fatal&amp;#34;&lt;/span>) &lt;span style="color:#66d9ef">then&lt;/span> &lt;span style="color:#75715e">-- if the call to git show fails&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> text &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Not Committed Yet&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api.nvim_buf_set_virtual_text(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, line[&lt;span style="color:#ae81ff">1&lt;/span>] &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>, {{ text,&lt;span style="color:#e6db74">&amp;#39;GitLens&amp;#39;&lt;/span> }}, {}) &lt;span style="color:#75715e">-- set virtual text for namespace 2 with the content from git and assign it to the higlight group &amp;#39;GitLens&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">M&lt;/span>.&lt;span style="color:#a6e22e">clearBlameVirtText&lt;/span>() &lt;span style="color:#75715e">-- important for clearing out the text when our cursor moves&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> api.nvim_buf_clear_namespace(&lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#ae81ff">2&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>, &lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">return&lt;/span> M
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-vim" data-lang="vim">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&amp;#34; in init.vim&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lua&lt;/span> &lt;span style="color:#a6e22e">vim&lt;/span>.&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">nvim_command&lt;/span> [[&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">CursorHold&lt;/span> * &lt;span style="color:#a6e22e">lua&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utils&amp;#39;&lt;/span>.&lt;span style="color:#a6e22e">blameVirtText&lt;/span>()]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lua&lt;/span> &lt;span style="color:#a6e22e">vim&lt;/span>.&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">nvim_command&lt;/span> [[&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">CursorMoved&lt;/span> * &lt;span style="color:#a6e22e">lua&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utils&amp;#39;&lt;/span>.&lt;span style="color:#a6e22e">clearBlameVirtText&lt;/span>()]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#a6e22e">lua&lt;/span> &lt;span style="color:#a6e22e">vim&lt;/span>.&lt;span style="color:#a6e22e">api&lt;/span>.&lt;span style="color:#a6e22e">nvim_command&lt;/span> [[&lt;span style="color:#66d9ef">autocmd&lt;/span> &lt;span style="color:#a6e22e">CursorMovedI&lt;/span> * &lt;span style="color:#a6e22e">lua&lt;/span> &lt;span style="color:#a6e22e">require&lt;/span>&lt;span style="color:#e6db74">&amp;#39;utils&amp;#39;&lt;/span>.&lt;span style="color:#a6e22e">clearBlameVirtText&lt;/span>()]]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">hi&lt;/span>! &lt;span style="color:#a6e22e">link&lt;/span> &lt;span style="color:#a6e22e">GitLens&lt;/span> &lt;span style="color:#a6e22e">Comment&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Using LibUV in Neovim</title><link>https://teukka.tech/posts/2020-01-07-vimloop/</link><pubDate>Tue, 07 Jan 2020 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2020-01-07-vimloop/</guid><description>&lt;h2 id="off-the-main-loop-async-actions-within-neovim">Off The Main Loop: Async Actions within Neovim&lt;/h2>
&lt;p>Neovim embeds the libuv library in the editor and exposes lua (and to some extent vimscript through the &lt;code>jobstart&lt;/code> function) bindings for interacting with the library&amp;rsquo;s API. This allows actions in the editor to happen asynchronously, keeping the main editor loop clear for user input. What this means practically for users is that actions which take a long time such as grepping through large projects, generating ctags, or linting can now be done in the background without blocking the user&amp;rsquo;s ability to keep editing text.&lt;/p></description></item><item><title>From init.vim to init.lua</title><link>https://teukka.tech/posts/2019-12-19-luanvim/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://teukka.tech/posts/2019-12-19-luanvim/</guid><description>&lt;h2 id="why-lua">Why Lua?&lt;/h2>
&lt;p>Neovim has an embedded lua 5.1 runtime which is used to create faster and more powerful extensions of your favorite editor. In the &lt;a href="https://neovim.io/charter/">Neovim charter&lt;/a>, it lists one of its goals as developing a first-class lua scripting alternative to VimL. One of the reasons for doing this is that VimL is a slow interpreted language with almost no optimizations. Much of the time spent in vim startup and in actions from plugins that can block the main loop in the editor is in parsing and executing vimscript. A great explanation of this can be found in Neovim lead maintainer, Justin M. Keyes&amp;rsquo; talk, &lt;a href="https://www.youtube.com/watch?v=Bt-vmPC_-Ho">We can have nice things&lt;/a>.&lt;/p></description></item></channel></rss>